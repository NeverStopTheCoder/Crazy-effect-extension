{"entries":[{"timestamp":1742764051836,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":178,"length1":55,"diffs":[[1,"        \"assets.json\"\n"]]},{"start1":207,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"U.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"},{"type":"added","filename":"Uu.ts","value":"// Add your code here\nnamespace glitchEffect {\n    //% block=\"corrupt $sprite over $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.shadow=timePicker\n    export function corruptSprite(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let corrupted = original.clone()\n        let endTime = game.runtime() + duration\n\n        game.onUpdateInterval(50, function () {\n            if (game.runtime() > endTime) return\n\n            // **Randomly change pixels**\n            for (let i = 0; i < corrupted.width * 0.2; i++) { // 20% of pixels change\n                let x = randint(0, corrupted.width - 1)\n                let y = randint(0, corrupted.height - 1)\n                let glitchColor = randint(2, 14) // Random colors\n                corrupted.setPixel(x, y, glitchColor)\n            }\n\n            // **Slight screen shake**\n            sprite.x += randint(-1, 1)\n            sprite.y += randint(-1, 1)\n\n            // **Apply corruption**\n            sprite.setImage(corrupted)\n        })\n\n        // **Slow fade out effect**\n        control.runInParallel(function () {\n            for (let i = 15; i >= 0; i--) {\n                let faded = corrupted.clone()\n                for (let x = 0; x < faded.width; x++) {\n                    for (let y = 0; y < faded.height; y++) {\n                        if (faded.getPixel(x, y) != 0) faded.setPixel(x, y, i)\n                    }\n                }\n                sprite.setImage(faded)\n                pause(80) // **Wait before the next fade step**\n            }\n            sprite.setImage(img``) // **Sprite disappears**\n        })\n    }\n        //% block=\"glitch shake $sprite for $duration ms\"\n        //% sprite.shadow=variables_get\n        //% duration.shadow=timePicker\n        export function glitchShake(sprite: Sprite, duration: number) {\n            let endTime = game.runtime() + duration\n\n            game.onUpdateInterval(50, function () {\n                if (game.runtime() > endTime) return\n\n                sprite.x += randint(-2, 2)\n                sprite.y += randint(-2, 2)\n            })\n        }\n        //% block=\"enable afterimage effect on $sprite\"\n        //% sprite.shadow=variables_get\n        export function afterimageEffect(sprite: Sprite) {\n            game.onUpdateInterval(100, function () {\n                let ghost = sprite.image.clone()\n                let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n                ghostSprite.setPosition(sprite.x, sprite.y)\n                ghostSprite.setFlag(SpriteFlag.Ghost, true)\n                ghostSprite.setFlag(SpriteFlag.AutoDestroy, true)\n                ghostSprite.lifespan = 200\n                ghostSprite.image.replace(1, 3) // Make it slightly faded\n            })\n        }\n        //% block=\"pixel shift $sprite intensity $intensity every $interval ms\"\n        //% sprite.shadow=variables_get\n        //% intensity.min=1 intensity.max=5\n        //% interval.shadow=timePicker\n        export function pixelShift(sprite: Sprite, intensity: number, interval: number) {\n            game.onUpdateInterval(interval, function () {\n                let img = sprite.image.clone()\n                for (let x = 0; x < img.width; x++) {\n                    for (let y = 0; y < img.height; y++) {\n                        if (Math.percentChance(30)) { // Randomly shift some pixels\n                            let dx = x + randint(-intensity, intensity)\n                            let dy = y + randint(-intensity, intensity)\n\n                            if (dx >= 0 && dx < img.width && dy >= 0 && dy < img.height) {\n                                img.setPixel(x, y, sprite.image.getPixel(dx, dy))\n                            }\n                        }\n                    }\n                }\n                sprite.setImage(img)\n            })\n        }\n    //% block=\"apply scanline overlay to $sprite with spacing $spacing\"\n    //% sprite.shadow=variables_get\n    //% spacing.min=1 spacing.max=10\n    export function scanlineOverlay(sprite: Sprite, spacing: number) {\n        let img = sprite.image.clone()\n        for (let y = 0; y < img.height; y += spacing) {\n            for (let x = 0; x < img.width; x++) {\n                img.setPixel(x, y, 0) // Black scanline\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply hue shift to $sprite with shift $amount\"\n    //% sprite.shadow=variables_get\n    //% amount.min=1 amount.max=255\n    export function hueShift(sprite: Sprite, amount: number) {\n        let img = sprite.image.clone()\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let oldColor = img.getPixel(x, y)\n                if (oldColor !== 0) { // Avoid shifting transparent pixels\n                    let newColor = (oldColor + amount) % 15 // Wrap colors around\n                    img.setPixel(x, y, newColor)\n                }\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply outline plus to $sprite with color $color\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    export function outlinePlus(sprite: Sprite, color: number) {\n        let img = sprite.image.clone()\n        let outlinedImg = image.create(img.width + 2, img.height + 2)\n\n        // Copy original image into the center of new image\n        outlinedImg.drawTransparentImage(img, 1, 1)\n\n        // Loop through each pixel and add an outline\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                if (img.getPixel(x, y) != 0) { // Not transparent\n                    for (let dx = -1; dx <= 1; dx++) {\n                        for (let dy = -1; dy <= 1; dy++) {\n                            if (outlinedImg.getPixel(x + dx + 1, y + dy + 1) == 0) {\n                                outlinedImg.setPixel(x + dx + 1, y + dy + 1, color)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        sprite.setImage(outlinedImg)\n    }\n    //% block=\"apply afterimage trail to $sprite with color $color lasting $duration ms\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    //% duration.min=50 duration.max=1000\n    export function afterimageTrail(sprite: Sprite, color: number, duration: number) {\n        game.onUpdateInterval(50, function () {\n            let ghost = image.create(sprite.width, sprite.height)\n            ghost.drawTransparentImage(sprite.image, 0, 0)\n            ghost.replace(1, color) // Tint effect\n            let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n            ghostSprite.setPosition(sprite.x, sprite.y)\n            ghostSprite.lifespan = duration // Fades out\n            ghostSprite.z = -1 // Keeps it behind the main sprite\n        })\n    }\n    //% block=\"shake screen for $duration ms with intensity $intensity\"\n    //% duration.min=50 duration.max=2000\n    //% intensity.min=1 intensity.max=10\n    export function screenShake(duration: number, intensity: number) {\n        let endTime = game.runtime() + duration\n        game.onUpdate(function () {\n            if (game.runtime() < endTime) {\n                scene.cameraShake(intensity, 50)\n            }\n        })\n    }\n    //% block=\"flash $sprite for $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.min=50 duration.max=1000\n    export function flash(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let flashImage = sprite.image.clone()\n        flashImage.replace(1, 15) // Turn white\n        sprite.setImage(flashImage)\n        pause(500)\n            sprite.setImage(original)\n    }\n    //% block=\"apply glitch effect to $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchEffect(sprite: Sprite) {\n        game.onUpdateInterval(200, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 5; i++) {\n                img.setPixel(randint(0, img.width - 1), randint(0, img.height - 1), randint(1, 15))\n            }\n            sprite.setImage(img)\n        })\n    }\n    \n}"}]},{"timestamp":1742764663158,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"Uu.ts","patch":[{"start1":8162,"length1":905,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1742764717921,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":3307,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":898,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":39,"diffs":[[1,"    \"name\": \"Untitled\",\n"]]},{"start1":240,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"Uu.ts","patch":[{"start1":9067,"length1":9848,"diffs":[[1,""]]}]}]},{"timestamp":1742765320352,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":852,"length1":47,"diffs":[[1,"glitchEffect.afterimageTrail(mySprite, 2, 50)\n"]]}]}]},{"timestamp":1742765324431,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":969,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable></variables><block type=\"pxt-on-start\" x=\"54\" y=\"56\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1501,"length1":1939,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetsetbounceonwall\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"on\"><shadow type=\"toggleOnOff\"><field name=\"on\">true</field></shadow></value><next><block type=\"glitchEffect_afterimageTrail\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"duration\"><shadow type=\"math_number_minmax\"><mutation min=\"50\" max=\"1000\" label=\"Duration\" precision=\"0\"></mutation><field name=\"SLIDER\">50</field></shadow></value></block></next></block></next></block></next></block></statement></block><block type=\"keyonevent\" x=\"77\" y=\"522\"><field name=\"button\">controller.A</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"Sprite_blockCombine_change\"><field name=\"property\">Sprite.vy@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\"><field name=\"property\">Sprite.vx@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":71,"diffs":[[1,""]]},{"start1":66,"length1":38,"diffs":[[1,"    mySprite.vy += 100\n    mySprite.vx += 100\n"]]},{"start1":115,"length1":24,"diffs":[[1,"let mySprite: Sprite = null\n"]]},{"start1":172,"length1":27,"diffs":[[1,"mySprite = sprites.create(img`\n"]]},{"start1":821,"length1":71,"diffs":[[1,"mySprite.setBounceOnWall(true)\nglitchEffect.afterimageTrail(mySprite, 2, 683)\n"]]}]},{"type":"edited","filename":"Uu.ts","patch":[{"start1":18915,"length1":881,"diffs":[[1,""]]}]}]},{"timestamp":1742765734837,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":969,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable></variables><block type=\"pxt-on-start\" x=\"41\" y=\"52\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1497,"length1":5669,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetsetbounceonwall\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"on\"><shadow type=\"toggleOnOff\"><field name=\"on\">true</field></shadow></value><next><block type=\"glitchEffect_afterimageTrail\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"duration\"><shadow type=\"math_number_minmax\"><mutation min=\"50\" max=\"1000\" label=\"Duration\" precision=\"0\"></mutation><field name=\"SLIDER\">1000</field></shadow></value></block></next></block></next></block></next></block></statement></block><block type=\"keyonevent\" x=\"216\" y=\"324\"><field name=\"button\">controller.B</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"keyonevent\" x=\"23\" y=\"466\"><field name=\"button\">controller.A</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"Sprite_blockCombine_change\"><field name=\"property\">Sprite.vy@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\"><field name=\"property\">Sprite.vx@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":137,"length1":2,"diffs":[[1,"    item.vy += 100\n    item.vx += 100\n"]]},{"start1":178,"length1":0,"diffs":[[1,"let item: Sprite = null\n"]]},{"start1":231,"length1":31,"diffs":[[1,"item = sprites.create(img`\n"]]},{"start1":903,"length1":33,"diffs":[[1,"glitchEffect.afterimageTrail(item, 2, 1000)\n"]]}]},{"type":"edited","filename":"Uu.ts","patch":[{"start1":19059,"length1":35,"diffs":[[1,""]]},{"start1":19796,"length1":1442,"diffs":[[1,""]]}]}]},{"timestamp":1742935221974,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1121,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable></variables><block type=\"pxt-on-start\" x=\"35\" y=\"48\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1497,"length1":5603,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetsetbounceonwall\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"on\"><shadow type=\"toggleOnOff\"><field name=\"on\">true</field></shadow></value><next><block type=\"glitchEffect_stretch\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"scaleX\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><value name=\"scaleY\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></statement></block><block type=\"glitchEffect_afterimageTrail\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"575\" y=\"220\"><value name=\"sprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"color\"><shadow type=\"colorindexpicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"index\">2</field></shadow></value><value name=\"duration\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"50\" max=\"1000\" label=\"Duration\" precision=\"0\"></mutation><field name=\"SLIDER\">1000</field></shadow></value></block><block type=\"keyonevent\" x=\"563\" y=\"399\"><field name=\"button\">controller.A</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"glitchEffect_applyGlitchEffect\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"23\" y=\"484\"><value name=\"intensity\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"keyonevent\" x=\"324\" y=\"513\"><field name=\"button\">controller.B</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"539\" y=\"656\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":66,"length1":38,"diffs":[[1,"\t\n"]]}]}]},{"timestamp":1743189978284,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1119,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable><variable id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</variable><variable id=\"X^G7DJq%`I7BxldfzkoR\">y5</variable><variable id=\"r[rl(/Zr7nYsjhF0w)^2\">myImage</variable></variables><block type=\"pxt-on-start\" x=\"32\" y=\"55\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1649,"length1":5603,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetsetbounceonwall\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"on\"><shadow type=\"toggleOnOff\"><field name=\"on\">true</field></shadow></value><next><block type=\"glitchEffect_stretch\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"scaleX\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><value name=\"scaleY\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></statement></block><block type=\"glitchEffect_afterimageTrail\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"556\" y=\"159\"><value name=\"sprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"color\"><shadow type=\"colorindexpicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"index\">2</field></shadow></value><value name=\"duration\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"50\" max=\"1000\" label=\"Duration\" precision=\"0\"></mutation><field name=\"SLIDER\">1000</field></shadow></value></block><block type=\"keyonevent\" x=\"528\" y=\"351\"><field name=\"button\">controller.A</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"keyonevent\" x=\"289\" y=\"465\"><field name=\"button\">controller.B</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"glitchEffect_applyGlitchEffect\"><value name=\"intensity\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></statement></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"585\" y=\"691\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":255,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1743293296159,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":255,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1743293372482,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":8488,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable><variable id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</variable><variable id=\"X^G7DJq%`I7BxldfzkoR\">y5</variable><variable id=\"r[rl(/Zr7nYsjhF0w)^2\">myImage</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1647,"length1":4458,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetsetbounceonwall\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"on\"><shadow type=\"toggleOnOff\"><field name=\"on\">true</field></shadow></value><next><block type=\"glitchEffect_stretch\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"scaleX\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><value name=\"scaleY\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></statement></block><block type=\"glitchEffect_afterimageTrail\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"524\" y=\"104\"><value name=\"sprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"color\"><shadow type=\"colorindexpicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"index\">2</field></shadow></value><value name=\"duration\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"50\" max=\"1000\" label=\"Duration\" precision=\"0\"></mutation><field name=\"SLIDER\">1000</field></shadow></value></block><block type=\"keyonevent\" x=\"496\" y=\"296\"><field name=\"button\">controller.A</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"keyonevent\" x=\"257\" y=\"410\"><field name=\"button\">controller.B</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"glitchEffect_applyGlitchEffect\"><value name=\"intensity\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></statement></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"553\" y=\"636\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":66,"length1":2,"diffs":[[1,"    glitchEffect.applyGlitchEffect(0)\n"]]},{"start1":178,"length1":377,"diffs":[[1,"scene.setBackgroundColor(11)\nlet item = sprites.create(img`\n    . . . . . . f f f f . . . . . . \n    . . . . f f f 2 2 f f f . . . . \n    . . . f f f 2 2 2 2 f f f . . . \n    . . f f f e e e e e e f f f . . \n    . . f f e 2 2 2 2 2 2 e e f . . \n    . . f e 2 f f f f f f 2 e f . . \n    . . f f f f e e e e f f f f . . \n    . f f e f b f 4 4 f b f e f f . \n    . f e e 4 1 f d d f 1 4 e e f . \n    . . f e e d d d d d d e e f . . \n    . . . f e e 4 4 4 4 e e f . . . \n    . . e 4 f 2 2 2 2 2 2 f 4 e . . \n    . . 4 d f 2 2 2 2 2 2 f d 4 . . \n    . . 4 4 f 4 4 5 5 4 4 f 4 4 . . \n    . . . . . f f f f f f . . . . . \n    . . . . . f f . . f f . . . . . \n    `, SpriteKind.Player)\nitem.setBounceOnWall(true)\nglitchEffect.stretch(item, 5, 1)\n"]]}]}]},{"timestamp":1743293972458,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1232,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable><variable id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</variable><variable id=\"X^G7DJq%`I7BxldfzkoR\">y5</variable><variable id=\"r[rl(/Zr7nYsjhF0w)^2\">myImage</variable><variable id=\"iy]Tgaljii_#DWU?Co1/\">Screen</variable><variable id=\"$hxAxr#;d!8NbNVROVm,\">picture</variable></variables><block type=\"pxt-on-start\" x=\"39\" y=\"48\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"iy]Tgaljii_#DWU?Co1/\">Screen</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><shadow type=\"math_number\"><field name=\"NUM\">160</field></shadow></value><value name=\"height\"><shadow type=\"math_number\"><field name=\"NUM\">120</field></shadow></value></block></value><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"percentchance\"><value name=\"percentage\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" label=\"Number\" precision=\"0\"></mutation><field name=\"SLIDER\">100</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">159</field></shadow></value><statement name=\"DO\"><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"X^G7DJq%`I7BxldfzkoR\">y5</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">119</field></shadow></value><statement name=\"DO\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"percentchance\"><value name=\"percentage\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" label=\"Number\" precision=\"0\"></mutation><field name=\"SLIDER\">50</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"Image_setPixel\"><value name=\"picture\"><block type=\"imagescreen\"></block></value><value name=\"x\"><block type=\"variables_get\"><field name=\"VAR\" id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</field></block></value><value name=\"y\"><block type=\"variables_get\"><field name=\"VAR\" id=\"X^G7DJq%`I7BxldfzkoR\">y5</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">1</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"Image_setPixel\"><value name=\"x\"><block type=\"variables_get\"><field name=\"VAR\" id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</field></block></value><value name=\"y\"><block type=\"variables_get\"><field name=\"VAR\" id=\"X^G7DJq%`I7BxldfzkoR\">y5</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">15</field></shadow></value></block></statement></block></statement></block></statement></block></statement></block></next></block></statement></block><block type=\"gamesetbackgroundcolor\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"160\" y=\"49\"><value name=\"color\"><shadow type=\"colorindexpicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"index\">11</field></shadow></value></block><block type=\"keyonevent\" x=\"492\" y=\"46\"><field name=\"button\">controller.B</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"gameupdate\" x=\"-33\" y=\"167\"></block><block type=\"keyonevent\" x=\"-3\" y=\"246\"><field name=\"button\">controller.A</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"variables_get\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"477\" y=\"244\"><field name=\"VAR\" id=\"iy]Tgaljii_#DWU?Co1/\">Screen</field></block><block type=\"variables_get\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"744\" y=\"273\"><field name=\"VAR\" id=\"iy]Tgaljii_#DWU?Co1/\">Screen</field></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"703\" y=\"530\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"725\" y=\"539\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"img\"><shadow type=\"screen_image_picker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"img\">img`\n. . . . . . f f f f . . . . . . \n. . . . f f f 2 2 f f f . . . . \n. . . f f f 2 2 2 2 f f f . . . \n. . f f f e e e e e e f f f . . \n. . f f e 2 2 2 2 2 2 e e f . . \n. . f e 2 f f f f f f 2 e f . . \n. . f f f f e e e e f f f f . . \n. f f e f b f 4 4 f b f e f f . \n. f e e 4 1 f d d f 1 4 e e f . \n. . f e e d d d d d d e e f . . \n. . . f e e 4 4 4 4 e e f . . . \n. . e 4 f 2 2 2 2 2 2 f 4 e . . \n. . 4 d f 2 2 2 2 2 2 f d 4 . . \n. . 4 4 f 4 4 5 5 4 4 f 4 4 . . \n. . . . . f f f f f f . . . . . \n. . . . . f f . . f f . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetsetbounceonwall\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"sprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"on\"><shadow type=\"toggleOnOff\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"on\">true</field></shadow></value><next><block type=\"game_control_sprite\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"sprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"vx\"><shadow type=\"spriteSpeedPicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"speed\">100</field></shadow></value><value name=\"vy\"><shadow type=\"spriteSpeedPicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"speed\">100</field></shadow></value></block></next></block></next></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"322\" y=\"808\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"img\"><shadow type=\"screen_image_picker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"img\">img`\n"]]},{"start1":11224,"length1":5340,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.x@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"min\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">160</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.y@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"min\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">120</field></shadow></value></block></value><next><block type=\"spritedestroy2\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"duration\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">500</field></shadow></value></block></next></block></next></block></next></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":766,"diffs":[[1,"controller.B.onEvent(ControllerButtonEvent.Pressed, function () {\n\t\n})\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n\t\n})\nlet Screen = image.create(160, 120)\nif (Math.percentChance(100)) {\n    for (let x3 = 0; x3 <= 159; x3++) {\n        for (let y5 = 0; y5 <= 119; y5++) {\n            if (Math.percentChance(50)) {\n                image.screenImage().setPixel(x3, y5, 1)\n            } else {\n                null.setPixel(x3, y5, 15)\n            }\n        }\n    }\n}\ngame.onUpdate(function () {\n\t\n})\n"]]}]}]},{"timestamp":1743294065737,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1230,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable><variable id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</variable><variable id=\"X^G7DJq%`I7BxldfzkoR\">y5</variable><variable id=\"r[rl(/Zr7nYsjhF0w)^2\">myImage</variable><variable id=\"iy]Tgaljii_#DWU?Co1/\">Screen</variable><variable id=\"$hxAxr#;d!8NbNVROVm,\">picture</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1760,"length1":5339,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.x@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">160</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.y@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">120</field></shadow></value></block></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"duration\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"625\" y=\"20\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>"]]}]}]},{"timestamp":1743335714102,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1412,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable><variable id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</variable><variable id=\"X^G7DJq%`I7BxldfzkoR\">y5</variable><variable id=\"r[rl(/Zr7nYsjhF0w)^2\">myImage</variable><variable id=\"iy]Tgaljii_#DWU?Co1/\">Screen</variable><variable id=\"$hxAxr#;d!8NbNVROVm,\">picture</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1758,"length1":6483,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.x@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">160</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.y@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">120</field></shadow></value></block></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"duration\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"605\" y=\"0\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>"]]}]}]},{"timestamp":1743860769715,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1230,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable><variable id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</variable><variable id=\"X^G7DJq%`I7BxldfzkoR\">y5</variable><variable id=\"r[rl(/Zr7nYsjhF0w)^2\">myImage</variable><variable id=\"iy]Tgaljii_#DWU?Co1/\">Screen</variable><variable id=\"$hxAxr#;d!8NbNVROVm,\">picture</variable></variables><block type=\"pxt-on-start\" id=\"JGVqkbu6-p2/DodIwJ!S\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\" id=\"pD9K^,]~v}99B2[nJF8*\"><value name=\"color\"><shadow type=\"colorindexpicker\" id=\"(]%UVM~gdMkw}a%[hZ7j\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\" id=\"YG)31!8G})b~a/Xo]OMi\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"sRKdJTRG`1-r:Ie88!Du\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\" id=\"5ks)?OdlUWILeQ,#$;^m\"><value name=\"img\"><shadow type=\"screen_image_picker\" id=\"9Se~0c[0zK11R[IeIm$S\"><field name=\"img\">img`\n"]]},{"start1":1940,"length1":5339,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\" id=\"0:pj^2W4i:5ne17jR:!B\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\" id=\"M/vh8-Ihx6fC:/GQwi]k\"><field name=\"property\">Sprite.x@set</field><value name=\"mySprite\"><block type=\"variables_get\" id=\"y^Apg7ZHy0MzR?eI|?^Q\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\" id=\"`SZ(vBIbQ1+A=c(0/6/U\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\" id=\"KDj={=U`eF;}l8iOgSYr\"><value name=\"min\"><shadow type=\"math_number\" id=\"Hs7jTGbEmSQKB/oM}j)v\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\" id=\"CrUyZKQIO[qQfz{eohm=\"><field name=\"NUM\">160</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\" id=\"Hzz]c@XWH7*{![mGx.7}\"><field name=\"property\">Sprite.y@set</field><value name=\"mySprite\"><block type=\"variables_get\" id=\"diVPs/iLUA!IYs-My2]B\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\" id=\"*Q=?`a3Eo1fjP)TLRgG$\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\" id=\"XeB7ac9z%o3ustK^_j%3\"><value name=\"min\"><shadow type=\"math_number\" id=\"Niv~cE-0TT5!JLsyzk~T\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\" id=\"FF})IocnjOCsvX@Rrz}!\"><field name=\"NUM\">120</field></shadow></value></block></value><next><block type=\"spritedestroy2\" id=\"^Zk9ltBsH1oAU3{VVY`{\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\" id=\"usc$5Vzq;K2tlS6Qjl~S\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"duration\"><shadow type=\"timePicker\" id=\"!#UQUtE{bL`p7yiEHw#{\"><field name=\"ms\">500</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"Sprite_blockCombine_change\" id=\"@76r)8yw==6qw]Ven.H6\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"605\" y=\"0\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" id=\"|!%t8(k?-nO~n=J=9cv2\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" id=\"9~4-N2Y3U)2IsriB=`cn\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" id=\"FoTlZuZrYTyc1pp3Da:o\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"M!.])+MDmj|1^@oLoM?+\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" id=\"Q{+,7xK|;LTyJ$!ieS|^\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"2@S9k/q#rE$[)MB(d|Hh\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" id=\"hP)9KvFiO72;z}2J~xL~\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" id=\"gz,e3Sd!nu$50YmfL5~l\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" id=\"5^waeFtya?kU$kn:v11O\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" id=\"72KM?$dvAQ}RIAAyO1N~\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"6~s:mfOg``1=EC#`y)%$\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" id=\"cBe/h#VMy~Qda?cO__@V\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"SIA;ZIJ;Aacca3q@,(?A\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" id=\"JiuOs#o.a]aYY!dkNM[:\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" id=\"WK}h45dymC,:DHoKh#4|\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" id=\"z!CB7uqCS`cZDP(?(*x=\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" id=\"7hySU?%!DBr#;9vA9/G$\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"#XP2!$3B5t8q?TAQd@Wx\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" id=\"o%5-;_Db~A3d2e]mOx`#\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"]k-[v$_x9j*j_=U$|=CZ\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" id=\"xy4ka]#0{!E8Rn.)zC/q\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" id=\"PA=8Iw?B$Np*SqPviT`l\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" id=\"WS,lHHG@gz:ekWiuKn^0\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" id=\"*:Ih{kELHgl4qz@mGXPb\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"wr`srdXpEWE;0.aM1Y8Q\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" id=\"kz;7^8`CWi=qunr+|!+e\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"6n$pa`My2BaOA9wZ)2w#\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>"]]}]}]},{"timestamp":1743860771877,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable><variable id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</variable><variable id=\"X^G7DJq%`I7BxldfzkoR\">y5</variable><variable id=\"r[rl(/Zr7nYsjhF0w)^2\">myImage</variable><variable id=\"iy]Tgaljii_#DWU?Co1/\">Screen</variable><variable id=\"$hxAxr#;d!8NbNVROVm,\">picture</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.x@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">160</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.y@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">120</field></shadow></value></block></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"duration\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"605\" y=\"0\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"scene.setBackgroundColor(11)\nlet mySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . 1 1 1 1 1 . . . . . . \n    . . . . . 1 1 1 1 1 . . . . . . \n    . . . . . 1 1 1 1 1 . . . . . . \n    . . . . . 1 1 1 1 1 . . . . . . \n    . . . . . 1 1 1 1 1 . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmySprite.x = randint(0, 160)\nmySprite.y = randint(0, 120)\nsprites.destroy(mySprite)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":216,"length1":0,"diffs":[[1,"        \"U.ts\",\n"]]}]},{"type":"edited","filename":"Uu.ts","patch":[{"start1":22,"length1":12,"diffs":[[1,""]]},{"start1":8162,"length1":0,"diffs":[[1,"    //% block=\"apply time fragmentation to $sprite\"\n    //% sprite.shadow=variables_get\n    export function timeFragmentation(sprite: Sprite) {\n        let ghostImages: Image[] = []\n        let ghostPositions: number[][] = []\n\n        game.onUpdateInterval(100, function () {\n            // Store old positions & images\n            if (ghostImages.length > 5) {\n                ghostImages.shift()\n                ghostPositions.shift()\n            }\n            ghostImages.push(sprite.image.clone())\n            ghostPositions.push([sprite.x, sprite.y])\n\n            // Randomly decide which ghosts to show\n            for (let i = 0; i < ghostImages.length; i++) {\n                if (Math.percentChance(70)) {\n                    screen.drawTransparentImage(ghostImages[i], ghostPositions[i][0] + randint(-3, 3), ghostPositions[i][1] + randint(-3, 3))\n                }\n            }\n        })\n    }\n"]]},{"start1":12798,"length1":0,"diffs":[[1,"    //% block=\"shatter $sprite\"\n    //% sprite.shadow=variables_get\n    export function shatterEffect(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let particles: { x: number; y: number; vx: number; vy: number; color: number }[] = []\n\n        // Turn pixels into flying particles\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let color = img.getPixel(x, y)\n                if (color != 0) {\n                    particles.push({\n                        x: sprite.x + x - img.width / 2,\n                        y: sprite.y + y - img.height / 2,\n                        vx: Math.randomRange(-30, 30) / 10,\n                        vy: Math.randomRange(-30, 30) / 10,\n                        color: color\n                    })\n                }\n            }\n        }\n\n        // Remove the original sprite\n        sprite.setFlag(SpriteFlag.Invisible, true)\n\n        // Animate particles\n        game.onUpdateInterval(50, function () {\n            screen.fill(0)\n            for (let i = 0; i < particles.length; i++) {\n                let p = particles[i]\n                screen.setPixel(p.x, p.y, p.color)\n                p.x += p.vx\n                p.y += p.vy\n                p.vy += 0.5 // Simulated gravity\n            }\n        })\n    }\n"]]}]},{"type":"removed","filename":"U.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"}]},{"timestamp":1743861404781,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":239,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1743861476715,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":542,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":239,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"Uu.ts","patch":[{"start1":22,"length1":54,"diffs":[[1,"//%icon=\"\"\n"]]},{"start1":17611,"length1":0,"diffs":[[1,"    // Define the Glitch effect block\n    //%block=\"apply Glitch Effect with intensity $intensity\"\n  export function applyGlitchEffect(intensity: number) {\n        let glitchDuration = 100;  // Duration of each glitch square in milliseconds\n        let squareSize = Math.randomRange(5, 30);  // Random size of the square\n\n        // Generate a random number of white squares on the screen\n        for (let i = 0; i < intensity; i++) {\n            // Random position for the glitch square\n            let x = Math.randomRange(0, screen.width);\n            let y = Math.randomRange(0, screen.height);\n\n            // Create a white square (this simulates the glitch)\n            let square = sprites.create(img`\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n            `, SpriteKind.Player);\n\n            square.setPosition(x, y);\n            square.setImage(img` \n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            `);\n\n            square.image.fill(15); // White square\n            square.setFlag(SpriteFlag.Invisible, false);\n\n            // Remove the square after a short glitch duration\n            pause(glitchDuration);\n            square.destroy();\n        }\n    }\n"]]}]}]},{"timestamp":1743862072808,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":568,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"z_iSm4Wi.~3f~fpd8TFu\">item</variable><variable id=\"2`0A$~s%5sB{aF?qT0.n\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"/Qhk|):cT|ieg8?+^vpd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"!$D!0Xm*8E!,-J?w!@V+\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\".0I?n*^-(6s_=$kd]r3w\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"?tMTiHHJdDR%Q{!bH~aH\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":239,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1742764051835,"editorVersion":"2.0.40","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1742935221974,"editorVersion":"2.0.40","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable></variables><block type=\"pxt-on-start\" x=\"41\" y=\"52\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . f f f f . . . . . . \n. . . . f f f 2 2 f f f . . . . \n. . . f f f 2 2 2 2 f f f . . . \n. . f f f e e e e e e f f f . . \n. . f f e 2 2 2 2 2 2 e e f . . \n. . f e 2 f f f f f f 2 e f . . \n. . f f f f e e e e f f f f . . \n. f f e f b f 4 4 f b f e f f . \n. f e e 4 1 f d d f 1 4 e e f . \n. . f e e d d d d d d e e f . . \n. . . f e e 4 4 4 4 e e f . . . \n. . e 4 f 2 2 2 2 2 2 f 4 e . . \n. . 4 d f 2 2 2 2 2 2 f d 4 . . \n. . 4 4 f 4 4 5 5 4 4 f 4 4 . . \n. . . . . f f f f f f . . . . . \n. . . . . f f . . f f . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetsetbounceonwall\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"on\"><shadow type=\"toggleOnOff\"><field name=\"on\">true</field></shadow></value><next><block type=\"glitchEffect_afterimageTrail\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"duration\"><shadow type=\"math_number_minmax\"><mutation min=\"50\" max=\"1000\" label=\"Duration\" precision=\"0\"></mutation><field name=\"SLIDER\">1000</field></shadow></value></block></next></block></next></block></next></block></statement></block><block type=\"keyonevent\" x=\"216\" y=\"324\"><field name=\"button\">controller.B</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"keyonevent\" x=\"23\" y=\"466\"><field name=\"button\">controller.A</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"Sprite_blockCombine_change\"><field name=\"property\">Sprite.vy@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\"><field name=\"property\">Sprite.vx@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","U.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","Uu.ts":"// Add your code here\nnamespace glitchEffect {\n    //% block=\"corrupt $sprite over $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.shadow=timePicker\n    export function corruptSprite(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let corrupted = original.clone()\n        let endTime = game.runtime() + duration\n\n        game.onUpdateInterval(50, function () {\n            if (game.runtime() > endTime) return\n\n            // **Randomly change pixels**\n            for (let i = 0; i < corrupted.width * 0.2; i++) { // 20% of pixels change\n                let x = randint(0, corrupted.width - 1)\n                let y = randint(0, corrupted.height - 1)\n                let glitchColor = randint(2, 14) // Random colors\n                corrupted.setPixel(x, y, glitchColor)\n            }\n\n            // **Slight screen shake**\n            sprite.x += randint(-1, 1)\n            sprite.y += randint(-1, 1)\n\n            // **Apply corruption**\n            sprite.setImage(corrupted)\n        })\n\n        // **Slow fade out effect**\n        control.runInParallel(function () {\n            for (let i = 15; i >= 0; i--) {\n                let faded = corrupted.clone()\n                for (let x = 0; x < faded.width; x++) {\n                    for (let y = 0; y < faded.height; y++) {\n                        if (faded.getPixel(x, y) != 0) faded.setPixel(x, y, i)\n                    }\n                }\n                sprite.setImage(faded)\n                pause(80) // **Wait before the next fade step**\n            }\n            sprite.setImage(img``) // **Sprite disappears**\n        })\n    }\n        //% block=\"glitch shake $sprite for $duration ms\"\n        //% sprite.shadow=variables_get\n        //% duration.shadow=timePicker\n        export function glitchShake(sprite: Sprite, duration: number) {\n            let endTime = game.runtime() + duration\n\n            game.onUpdateInterval(50, function () {\n                if (game.runtime() > endTime) return\n\n                sprite.x += randint(-2, 2)\n                sprite.y += randint(-2, 2)\n            })\n        }\n        //% block=\"enable afterimage effect on $sprite\"\n        //% sprite.shadow=variables_get\n        export function afterimageEffect(sprite: Sprite) {\n            game.onUpdateInterval(100, function () {\n                let ghost = sprite.image.clone()\n                let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n                ghostSprite.setPosition(sprite.x, sprite.y)\n                ghostSprite.setFlag(SpriteFlag.Ghost, true)\n                ghostSprite.setFlag(SpriteFlag.AutoDestroy, true)\n                ghostSprite.lifespan = 200\n                ghostSprite.image.replace(1, 3) // Make it slightly faded\n            })\n        }\n        //% block=\"pixel shift $sprite intensity $intensity every $interval ms\"\n        //% sprite.shadow=variables_get\n        //% intensity.min=1 intensity.max=5\n        //% interval.shadow=timePicker\n        export function pixelShift(sprite: Sprite, intensity: number, interval: number) {\n            game.onUpdateInterval(interval, function () {\n                let img = sprite.image.clone()\n                for (let x = 0; x < img.width; x++) {\n                    for (let y = 0; y < img.height; y++) {\n                        if (Math.percentChance(30)) { // Randomly shift some pixels\n                            let dx = x + randint(-intensity, intensity)\n                            let dy = y + randint(-intensity, intensity)\n\n                            if (dx >= 0 && dx < img.width && dy >= 0 && dy < img.height) {\n                                img.setPixel(x, y, sprite.image.getPixel(dx, dy))\n                            }\n                        }\n                    }\n                }\n                sprite.setImage(img)\n            })\n        }\n    //% block=\"apply scanline overlay to $sprite with spacing $spacing\"\n    //% sprite.shadow=variables_get\n    //% spacing.min=1 spacing.max=10\n    export function scanlineOverlay(sprite: Sprite, spacing: number) {\n        let img = sprite.image.clone()\n        for (let y = 0; y < img.height; y += spacing) {\n            for (let x = 0; x < img.width; x++) {\n                img.setPixel(x, y, 0) // Black scanline\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply hue shift to $sprite with shift $amount\"\n    //% sprite.shadow=variables_get\n    //% amount.min=1 amount.max=255\n    export function hueShift(sprite: Sprite, amount: number) {\n        let img = sprite.image.clone()\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let oldColor = img.getPixel(x, y)\n                if (oldColor !== 0) { // Avoid shifting transparent pixels\n                    let newColor = (oldColor + amount) % 15 // Wrap colors around\n                    img.setPixel(x, y, newColor)\n                }\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply outline plus to $sprite with color $color\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    export function outlinePlus(sprite: Sprite, color: number) {\n        let img = sprite.image.clone()\n        let outlinedImg = image.create(img.width + 2, img.height + 2)\n\n        // Copy original image into the center of new image\n        outlinedImg.drawTransparentImage(img, 1, 1)\n\n        // Loop through each pixel and add an outline\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                if (img.getPixel(x, y) != 0) { // Not transparent\n                    for (let dx = -1; dx <= 1; dx++) {\n                        for (let dy = -1; dy <= 1; dy++) {\n                            if (outlinedImg.getPixel(x + dx + 1, y + dy + 1) == 0) {\n                                outlinedImg.setPixel(x + dx + 1, y + dy + 1, color)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        sprite.setImage(outlinedImg)\n    }\n    //% block=\"apply afterimage trail to $sprite with color $color lasting $duration ms\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    //% duration.min=50 duration.max=1000\n    export function afterimageTrail(sprite: Sprite, color: number, duration: number) {\n        game.onUpdateInterval(50, function () {\n            let ghost = image.create(sprite.width, sprite.height)\n            ghost.drawTransparentImage(sprite.image, 0, 0)\n            ghost.replace(1, color) // Tint effect\n            let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n            ghostSprite.setPosition(sprite.x, sprite.y)\n            ghostSprite.lifespan = duration // Fades out\n            ghostSprite.z = -1 // Keeps it behind the main sprite\n        })\n    }\n    //% block=\"shake screen for $duration ms with intensity $intensity\"\n    //% duration.min=50 duration.max=2000\n    //% intensity.min=1 intensity.max=10\n    export function screenShake(duration: number, intensity: number) {\n        let endTime = game.runtime() + duration\n        game.onUpdate(function () {\n            if (game.runtime() < endTime) {\n                scene.cameraShake(intensity, 50)\n            }\n        })\n    }\n    //% block=\"flash $sprite for $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.min=50 duration.max=1000\n    export function flash(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let flashImage = sprite.image.clone()\n        flashImage.replace(1, 15) // Turn white\n        sprite.setImage(flashImage)\n        pause(500)\n            sprite.setImage(original)\n    }\n    //% block=\"apply glitch effect to $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchEffect(sprite: Sprite) {\n        game.onUpdateInterval(200, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 5; i++) {\n                img.setPixel(randint(0, img.width - 1), randint(0, img.height - 1), randint(1, 15))\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply time fragmentation to $sprite\"\n    //% sprite.shadow=variables_get\n    export function timeFragmentation(sprite: Sprite) {\n        let ghostImages: Image[] = []\n        let ghostPositions: number[][] = []\n\n        game.onUpdateInterval(100, function () {\n            // Store old positions & images\n            if (ghostImages.length > 5) {\n                ghostImages.shift()\n                ghostPositions.shift()\n            }\n            ghostImages.push(sprite.image.clone())\n            ghostPositions.push([sprite.x, sprite.y])\n\n            // Randomly decide which ghosts to show\n            for (let i = 0; i < ghostImages.length; i++) {\n                if (Math.percentChance(70)) {\n                    screen.drawTransparentImage(ghostImages[i], ghostPositions[i][0] + randint(-3, 3), ghostPositions[i][1] + randint(-3, 3))\n                }\n            }\n        })\n    }\n    //% block=\"collapse sprite into itself $sprite\"\n    //% sprite.shadow=variables_get\n    export function screenCollapse(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let centerX = img.width >> 1\n        let centerY = img.height >> 1\n\n        game.onUpdateInterval(200, function () {\n            let newImg = img.clone()\n            for (let x = 0; x < img.width; x++) {\n                for (let y = 0; y < img.height; y++) {\n                    let dx = x - centerX\n                    let dy = y - centerY\n                    let angle = Math.atan2(dy, dx) + Math.PI / 12 // Slight spin\n                    let radius = Math.sqrt(dx * dx + dy * dy) * 0.9 // Shrinking inwards\n\n                    let newX = Math.round(centerX + Math.cos(angle) * radius)\n                    let newY = Math.round(centerY + Math.sin(angle) * radius)\n\n                    if (newX >= 0 && newX < img.width && newY >= 0 && newY < img.height) {\n                        newImg.setPixel(x, y, img.getPixel(newX, newY))\n                    }\n                }\n            }\n            sprite.setImage(newImg)\n        })\n    }\n    //% block=\"apply color out of space to $sprite\"\n    //% sprite.shadow=variables_get\n    export function colorOutOfSpace(sprite: Sprite) {\n        game.onUpdateInterval(150, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                let color = img.getPixel(x, y)\n                img.setPixel(x, y, 15 - color) // Invert color\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply entity distortion to $sprite\"\n    //% sprite.shadow=variables_get\n    export function entityDistortion(sprite: Sprite) {\n        game.onUpdateInterval(200, function () {\n            let img = sprite.image.clone()\n            let offsetX = randint(-2, 2)\n            let offsetY = randint(-2, 2)\n\n            let newImg = img.clone()\n            for (let x = 0; x < img.width; x++) {\n                for (let y = 0; y < img.height; y++) {\n                    let newX = x + offsetX\n                    let newY = y + offsetY\n                    if (newX >= 0 && newX < img.width && newY >= 0 && newY < img.height) {\n                        newImg.setPixel(newX, newY, img.getPixel(x, y))\n                    }\n                }\n            }\n            sprite.setImage(newImg)\n        })\n    }\n    //% block=\"apply anomaly breakdown to $sprite\"\n    //% sprite.shadow=variables_get\n    export function anomalyBreakdown(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, 0) // Set to transparent\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply dripping shadow to $sprite\"\n    //% sprite.shadow=variables_get\n    export function drippingShadow(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Create the \"drip\" effect\n            for (let x = 0; x < img.width; x++) {\n                for (let y = img.height - 1; y > 0; y--) {\n                    if (img.getPixel(x, y - 1) > 0 && Math.percentChance(20)) {\n                        img.setPixel(x, y, img.getPixel(x, y - 1)) // Copy pixel down\n                        img.setPixel(x, y - 1, 0) // Erase original to create \"drip\"\n                    }\n                }\n            }\n\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"shatter $sprite\"\n    //% sprite.shadow=variables_get\n    export function shatterEffect(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let particles: { x: number; y: number; vx: number; vy: number; color: number }[] = []\n\n        // Turn pixels into flying particles\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let color = img.getPixel(x, y)\n                if (color != 0) {\n                    particles.push({\n                        x: sprite.x + x - img.width / 2,\n                        y: sprite.y + y - img.height / 2,\n                        vx: Math.randomRange(-30, 30) / 10,\n                        vy: Math.randomRange(-30, 30) / 10,\n                        color: color\n                    })\n                }\n            }\n        }\n\n        // Remove the original sprite\n        sprite.setFlag(SpriteFlag.Invisible, true)\n\n        // Animate particles\n        game.onUpdateInterval(50, function () {\n            screen.fill(0)\n            for (let i = 0; i < particles.length; i++) {\n                let p = particles[i]\n                screen.setPixel(p.x, p.y, p.color)\n                p.x += p.vx\n                p.y += p.vy\n                p.vy += 0.5 // Simulated gravity\n            }\n        })\n    }\n    //% block=\"glitch warp $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchWarp(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let frames = 10 // Number of \"glitch frames\"\n\n        game.onUpdateInterval(100, function () {\n            if (frames > 0) {\n                let offsetX = Math.randomRange(-3, 3)\n                let offsetY = Math.randomRange(-3, 3)\n\n                let glitchImg = img.clone()\n\n                // Shift horizontal slices randomly\n                for (let y = 0; y < glitchImg.height; y += 2) {\n                    let shift = Math.randomRange(-5, 5)\n                    for (let x = 0; x < glitchImg.width; x++) {\n                        let color = img.getPixel((x + shift + glitchImg.width) % glitchImg.width, y)\n                        glitchImg.setPixel(x, y, color)\n                    }\n                }\n\n                // Randomly invert colors\n                if (Math.percentChance(30)) {\n                    for (let x = 0; x < glitchImg.width; x++) {\n                        for (let y = 0; y < glitchImg.height; y++) {\n                            let color = glitchImg.getPixel(x, y)\n                            glitchImg.setPixel(x, y, 15 - color) // Invert colors\n                        }\n                    }\n                }\n\n                // Randomly \"teleport\" sprite\n                if (Math.percentChance(15)) {\n                    sprite.setPosition(\n                        sprite.x + Math.randomRange(-10, 10),\n                        sprite.y + Math.randomRange(-10, 10)\n                    )\n                }\n\n                sprite.setImage(glitchImg)\n                frames--\n            } else {\n                sprite.setImage(img) // Reset to normal after glitching\n            }\n        })\n    }\n    //% block=\"temporal echo $sprite\"\n    //% sprite.shadow=variables_get\n    export function temporalEcho(sprite: Sprite) {\n        let echoes: Sprite[] = []\n        let maxEchoes = 5 // Number of echoes\n        let decayRate = 50 // How quickly echoes fade\n\n        game.onUpdateInterval(100, function () {\n            // Create a new echo\n            let echo = sprites.create(sprite.image.clone(), SpriteKind.Food)\n            echo.setPosition(sprite.x, sprite.y)\n            echo.setFlag(SpriteFlag.Ghost, true) // Prevent interaction\n            echoes.push(echo)\n\n            // Slowly fade echoes\n            for (let i = 0; i < echoes.length; i++) {\n                let fadeAmount = Math.max(0, 15 - (i * 3)) // Decrease brightness per echo\n                echoes[i].image.replace(15, fadeAmount) // Simulate fading effect\n            }\n\n            // Limit number of echoes\n            if (echoes.length > maxEchoes) {\n                echoes[0].destroy()\n                echoes.shift()\n            }\n        })\n    }\n    //% block=\"glitch pulse $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchPulse(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Randomly shift pixels in small areas\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 2)\n                let y = randint(0, img.height - 2)\n\n                let color1 = img.getPixel(x, y)\n                let color2 = img.getPixel(x + 1, y + 1)\n\n                img.setPixel(x, y, color2)\n                img.setPixel(x + 1, y + 1, color1)\n            }\n\n            // Randomly invert some pixels\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, randint(1, 15)) // Assign random color\n            }\n\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"glitch distort $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchDistort(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Randomly shift small pixel regions\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 2)\n                let y = randint(0, img.height - 2)\n\n                let color1 = img.getPixel(x, y)\n                let color2 = img.getPixel(x + 1, y + 1)\n\n                img.setPixel(x, y, color2)\n                img.setPixel(x + 1, y + 1, color1)\n            }\n\n            // Randomly insert glitchy pixels\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, randint(1, 15)) // Assigns random colors\n            }\n\n            sprite.setImage(img) // Updates sprite image with corruption effect\n        })\n    }\n    // Block for MakeCode extension\n    //% block=\"stretch $sprite horizontally $scaleX vertically $scaleY\"\n    //% scaleX.defl=2 scaleY.defl=2\n   export function stretch(sprite: Sprite, scaleX: number, scaleY: number) {\n        stretchSprite(sprite, scaleX, scaleY)\n    }\n    // Function to stretch a sprite\n    function stretchSprite(sprite: Sprite, scaleX: number, scaleY: number) {\n        let img = sprite.image\n        let newWidth = img.width * scaleX\n        let newHeight = img.height * scaleY\n        let newImg = image.create(newWidth, newHeight)\n\n        for (let x = 0; x < newWidth; x++) {\n            for (let y = 0; y < newHeight; y++) {\n                let srcX = Math.floor(x / scaleX)\n                let srcY = Math.floor(y / scaleY)\n                newImg.setPixel(x, y, img.getPixel(srcX, srcY))\n            }\n        }\n\n        sprite.setImage(newImg)\n    }\n}","pxt.json":"{\n    \"name\": \"Glitch effect extension\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"U.ts\",\n        \"Uu.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1743189978284,"editorVersion":"2.0.40","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable></variables><block type=\"pxt-on-start\" x=\"35\" y=\"48\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . f f f f . . . . . . \n. . . . f f f 2 2 f f f . . . . \n. . . f f f 2 2 2 2 f f f . . . \n. . f f f e e e e e e f f f . . \n. . f f e 2 2 2 2 2 2 e e f . . \n. . f e 2 f f f f f f 2 e f . . \n. . f f f f e e e e f f f f . . \n. f f e f b f 4 4 f b f e f f . \n. f e e 4 1 f d d f 1 4 e e f . \n. . f e e d d d d d d e e f . . \n. . . f e e 4 4 4 4 e e f . . . \n. . e 4 f 2 2 2 2 2 2 f 4 e . . \n. . 4 d f 2 2 2 2 2 2 f d 4 . . \n. . 4 4 f 4 4 5 5 4 4 f 4 4 . . \n. . . . . f f f f f f . . . . . \n. . . . . f f . . f f . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetsetbounceonwall\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"on\"><shadow type=\"toggleOnOff\"><field name=\"on\">true</field></shadow></value><next><block type=\"glitchEffect_stretch\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"scaleX\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><value name=\"scaleY\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></statement></block><block type=\"glitchEffect_afterimageTrail\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"575\" y=\"220\"><value name=\"sprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"color\"><shadow type=\"colorindexpicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"index\">2</field></shadow></value><value name=\"duration\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"50\" max=\"1000\" label=\"Duration\" precision=\"0\"></mutation><field name=\"SLIDER\">1000</field></shadow></value></block><block type=\"keyonevent\" x=\"563\" y=\"399\"><field name=\"button\">controller.A</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"glitchEffect_applyGlitchEffect\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"23\" y=\"484\"><value name=\"intensity\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"keyonevent\" x=\"324\" y=\"513\"><field name=\"button\">controller.B</field><field name=\"event\">ControllerButtonEvent.Pressed</field></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"539\" y=\"656\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","main.ts":"","README.md":" ","assets.json":"","U.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","Uu.ts":"// Add your code here\nnamespace glitchEffect {\n    //% block=\"corrupt $sprite over $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.shadow=timePicker\n    export function corruptSprite(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let corrupted = original.clone()\n        let endTime = game.runtime() + duration\n\n        game.onUpdateInterval(50, function () {\n            if (game.runtime() > endTime) return\n\n            // **Randomly change pixels**\n            for (let i = 0; i < corrupted.width * 0.2; i++) { // 20% of pixels change\n                let x = randint(0, corrupted.width - 1)\n                let y = randint(0, corrupted.height - 1)\n                let glitchColor = randint(2, 14) // Random colors\n                corrupted.setPixel(x, y, glitchColor)\n            }\n\n            // **Slight screen shake**\n            sprite.x += randint(-1, 1)\n            sprite.y += randint(-1, 1)\n\n            // **Apply corruption**\n            sprite.setImage(corrupted)\n        })\n\n        // **Slow fade out effect**\n        control.runInParallel(function () {\n            for (let i = 15; i >= 0; i--) {\n                let faded = corrupted.clone()\n                for (let x = 0; x < faded.width; x++) {\n                    for (let y = 0; y < faded.height; y++) {\n                        if (faded.getPixel(x, y) != 0) faded.setPixel(x, y, i)\n                    }\n                }\n                sprite.setImage(faded)\n                pause(80) // **Wait before the next fade step**\n            }\n            sprite.setImage(img``) // **Sprite disappears**\n        })\n    }\n        //% block=\"glitch shake $sprite for $duration ms\"\n        //% sprite.shadow=variables_get\n        //% duration.shadow=timePicker\n        export function glitchShake(sprite: Sprite, duration: number) {\n            let endTime = game.runtime() + duration\n\n            game.onUpdateInterval(50, function () {\n                if (game.runtime() > endTime) return\n\n                sprite.x += randint(-2, 2)\n                sprite.y += randint(-2, 2)\n            })\n        }\n        //% block=\"enable afterimage effect on $sprite\"\n        //% sprite.shadow=variables_get\n        export function afterimageEffect(sprite: Sprite) {\n            game.onUpdateInterval(100, function () {\n                let ghost = sprite.image.clone()\n                let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n                ghostSprite.setPosition(sprite.x, sprite.y)\n                ghostSprite.setFlag(SpriteFlag.Ghost, true)\n                ghostSprite.setFlag(SpriteFlag.AutoDestroy, true)\n                ghostSprite.lifespan = 200\n                ghostSprite.image.replace(1, 3) // Make it slightly faded\n            })\n        }\n        //% block=\"pixel shift $sprite intensity $intensity every $interval ms\"\n        //% sprite.shadow=variables_get\n        //% intensity.min=1 intensity.max=5\n        //% interval.shadow=timePicker\n        export function pixelShift(sprite: Sprite, intensity: number, interval: number) {\n            game.onUpdateInterval(interval, function () {\n                let img = sprite.image.clone()\n                for (let x = 0; x < img.width; x++) {\n                    for (let y = 0; y < img.height; y++) {\n                        if (Math.percentChance(30)) { // Randomly shift some pixels\n                            let dx = x + randint(-intensity, intensity)\n                            let dy = y + randint(-intensity, intensity)\n\n                            if (dx >= 0 && dx < img.width && dy >= 0 && dy < img.height) {\n                                img.setPixel(x, y, sprite.image.getPixel(dx, dy))\n                            }\n                        }\n                    }\n                }\n                sprite.setImage(img)\n            })\n        }\n    //% block=\"apply scanline overlay to $sprite with spacing $spacing\"\n    //% sprite.shadow=variables_get\n    //% spacing.min=1 spacing.max=10\n    export function scanlineOverlay(sprite: Sprite, spacing: number) {\n        let img = sprite.image.clone()\n        for (let y = 0; y < img.height; y += spacing) {\n            for (let x = 0; x < img.width; x++) {\n                img.setPixel(x, y, 0) // Black scanline\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply hue shift to $sprite with shift $amount\"\n    //% sprite.shadow=variables_get\n    //% amount.min=1 amount.max=255\n    export function hueShift(sprite: Sprite, amount: number) {\n        let img = sprite.image.clone()\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let oldColor = img.getPixel(x, y)\n                if (oldColor !== 0) { // Avoid shifting transparent pixels\n                    let newColor = (oldColor + amount) % 15 // Wrap colors around\n                    img.setPixel(x, y, newColor)\n                }\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply outline plus to $sprite with color $color\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    export function outlinePlus(sprite: Sprite, color: number) {\n        let img = sprite.image.clone()\n        let outlinedImg = image.create(img.width + 2, img.height + 2)\n\n        // Copy original image into the center of new image\n        outlinedImg.drawTransparentImage(img, 1, 1)\n\n        // Loop through each pixel and add an outline\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                if (img.getPixel(x, y) != 0) { // Not transparent\n                    for (let dx = -1; dx <= 1; dx++) {\n                        for (let dy = -1; dy <= 1; dy++) {\n                            if (outlinedImg.getPixel(x + dx + 1, y + dy + 1) == 0) {\n                                outlinedImg.setPixel(x + dx + 1, y + dy + 1, color)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        sprite.setImage(outlinedImg)\n    }\n    //% block=\"apply afterimage trail to $sprite with color $color lasting $duration ms\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    //% duration.min=50 duration.max=1000\n    export function afterimageTrail(sprite: Sprite, color: number, duration: number) {\n        game.onUpdateInterval(50, function () {\n            let ghost = image.create(sprite.width, sprite.height)\n            ghost.drawTransparentImage(sprite.image, 0, 0)\n            ghost.replace(1, color) // Tint effect\n            let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n            ghostSprite.setPosition(sprite.x, sprite.y)\n            ghostSprite.lifespan = duration // Fades out\n            ghostSprite.z = -1 // Keeps it behind the main sprite\n        })\n    }\n    //% block=\"shake screen for $duration ms with intensity $intensity\"\n    //% duration.min=50 duration.max=2000\n    //% intensity.min=1 intensity.max=10\n    export function screenShake(duration: number, intensity: number) {\n        let endTime = game.runtime() + duration\n        game.onUpdate(function () {\n            if (game.runtime() < endTime) {\n                scene.cameraShake(intensity, 50)\n            }\n        })\n    }\n    //% block=\"flash $sprite for $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.min=50 duration.max=1000\n    export function flash(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let flashImage = sprite.image.clone()\n        flashImage.replace(1, 15) // Turn white\n        sprite.setImage(flashImage)\n        pause(500)\n            sprite.setImage(original)\n    }\n    //% block=\"apply glitch effect to $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchEffect(sprite: Sprite) {\n        game.onUpdateInterval(200, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 5; i++) {\n                img.setPixel(randint(0, img.width - 1), randint(0, img.height - 1), randint(1, 15))\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply time fragmentation to $sprite\"\n    //% sprite.shadow=variables_get\n    export function timeFragmentation(sprite: Sprite) {\n        let ghostImages: Image[] = []\n        let ghostPositions: number[][] = []\n\n        game.onUpdateInterval(100, function () {\n            // Store old positions & images\n            if (ghostImages.length > 5) {\n                ghostImages.shift()\n                ghostPositions.shift()\n            }\n            ghostImages.push(sprite.image.clone())\n            ghostPositions.push([sprite.x, sprite.y])\n\n            // Randomly decide which ghosts to show\n            for (let i = 0; i < ghostImages.length; i++) {\n                if (Math.percentChance(70)) {\n                    screen.drawTransparentImage(ghostImages[i], ghostPositions[i][0] + randint(-3, 3), ghostPositions[i][1] + randint(-3, 3))\n                }\n            }\n        })\n    }\n    //% block=\"collapse sprite into itself $sprite\"\n    //% sprite.shadow=variables_get\n    export function screenCollapse(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let centerX = img.width >> 1\n        let centerY = img.height >> 1\n\n        game.onUpdateInterval(200, function () {\n            let newImg = img.clone()\n            for (let x = 0; x < img.width; x++) {\n                for (let y = 0; y < img.height; y++) {\n                    let dx = x - centerX\n                    let dy = y - centerY\n                    let angle = Math.atan2(dy, dx) + Math.PI / 12 // Slight spin\n                    let radius = Math.sqrt(dx * dx + dy * dy) * 0.9 // Shrinking inwards\n\n                    let newX = Math.round(centerX + Math.cos(angle) * radius)\n                    let newY = Math.round(centerY + Math.sin(angle) * radius)\n\n                    if (newX >= 0 && newX < img.width && newY >= 0 && newY < img.height) {\n                        newImg.setPixel(x, y, img.getPixel(newX, newY))\n                    }\n                }\n            }\n            sprite.setImage(newImg)\n        })\n    }\n    //% block=\"apply color out of space to $sprite\"\n    //% sprite.shadow=variables_get\n    export function colorOutOfSpace(sprite: Sprite) {\n        game.onUpdateInterval(150, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                let color = img.getPixel(x, y)\n                img.setPixel(x, y, 15 - color) // Invert color\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply entity distortion to $sprite\"\n    //% sprite.shadow=variables_get\n    export function entityDistortion(sprite: Sprite) {\n        game.onUpdateInterval(200, function () {\n            let img = sprite.image.clone()\n            let offsetX = randint(-2, 2)\n            let offsetY = randint(-2, 2)\n\n            let newImg = img.clone()\n            for (let x = 0; x < img.width; x++) {\n                for (let y = 0; y < img.height; y++) {\n                    let newX = x + offsetX\n                    let newY = y + offsetY\n                    if (newX >= 0 && newX < img.width && newY >= 0 && newY < img.height) {\n                        newImg.setPixel(newX, newY, img.getPixel(x, y))\n                    }\n                }\n            }\n            sprite.setImage(newImg)\n        })\n    }\n    //% block=\"apply anomaly breakdown to $sprite\"\n    //% sprite.shadow=variables_get\n    export function anomalyBreakdown(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, 0) // Set to transparent\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply dripping shadow to $sprite\"\n    //% sprite.shadow=variables_get\n    export function drippingShadow(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Create the \"drip\" effect\n            for (let x = 0; x < img.width; x++) {\n                for (let y = img.height - 1; y > 0; y--) {\n                    if (img.getPixel(x, y - 1) > 0 && Math.percentChance(20)) {\n                        img.setPixel(x, y, img.getPixel(x, y - 1)) // Copy pixel down\n                        img.setPixel(x, y - 1, 0) // Erase original to create \"drip\"\n                    }\n                }\n            }\n\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"shatter $sprite\"\n    //% sprite.shadow=variables_get\n    export function shatterEffect(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let particles: { x: number; y: number; vx: number; vy: number; color: number }[] = []\n\n        // Turn pixels into flying particles\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let color = img.getPixel(x, y)\n                if (color != 0) {\n                    particles.push({\n                        x: sprite.x + x - img.width / 2,\n                        y: sprite.y + y - img.height / 2,\n                        vx: Math.randomRange(-30, 30) / 10,\n                        vy: Math.randomRange(-30, 30) / 10,\n                        color: color\n                    })\n                }\n            }\n        }\n\n        // Remove the original sprite\n        sprite.setFlag(SpriteFlag.Invisible, true)\n\n        // Animate particles\n        game.onUpdateInterval(50, function () {\n            screen.fill(0)\n            for (let i = 0; i < particles.length; i++) {\n                let p = particles[i]\n                screen.setPixel(p.x, p.y, p.color)\n                p.x += p.vx\n                p.y += p.vy\n                p.vy += 0.5 // Simulated gravity\n            }\n        })\n    }\n    //% block=\"glitch warp $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchWarp(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let frames = 10 // Number of \"glitch frames\"\n\n        game.onUpdateInterval(100, function () {\n            if (frames > 0) {\n                let offsetX = Math.randomRange(-3, 3)\n                let offsetY = Math.randomRange(-3, 3)\n\n                let glitchImg = img.clone()\n\n                // Shift horizontal slices randomly\n                for (let y = 0; y < glitchImg.height; y += 2) {\n                    let shift = Math.randomRange(-5, 5)\n                    for (let x = 0; x < glitchImg.width; x++) {\n                        let color = img.getPixel((x + shift + glitchImg.width) % glitchImg.width, y)\n                        glitchImg.setPixel(x, y, color)\n                    }\n                }\n\n                // Randomly invert colors\n                if (Math.percentChance(30)) {\n                    for (let x = 0; x < glitchImg.width; x++) {\n                        for (let y = 0; y < glitchImg.height; y++) {\n                            let color = glitchImg.getPixel(x, y)\n                            glitchImg.setPixel(x, y, 15 - color) // Invert colors\n                        }\n                    }\n                }\n\n                // Randomly \"teleport\" sprite\n                if (Math.percentChance(15)) {\n                    sprite.setPosition(\n                        sprite.x + Math.randomRange(-10, 10),\n                        sprite.y + Math.randomRange(-10, 10)\n                    )\n                }\n\n                sprite.setImage(glitchImg)\n                frames--\n            } else {\n                sprite.setImage(img) // Reset to normal after glitching\n            }\n        })\n    }\n    //% block=\"temporal echo $sprite\"\n    //% sprite.shadow=variables_get\n    export function temporalEcho(sprite: Sprite) {\n        let echoes: Sprite[] = []\n        let maxEchoes = 5 // Number of echoes\n        let decayRate = 50 // How quickly echoes fade\n\n        game.onUpdateInterval(100, function () {\n            // Create a new echo\n            let echo = sprites.create(sprite.image.clone(), SpriteKind.Food)\n            echo.setPosition(sprite.x, sprite.y)\n            echo.setFlag(SpriteFlag.Ghost, true) // Prevent interaction\n            echoes.push(echo)\n\n            // Slowly fade echoes\n            for (let i = 0; i < echoes.length; i++) {\n                let fadeAmount = Math.max(0, 15 - (i * 3)) // Decrease brightness per echo\n                echoes[i].image.replace(15, fadeAmount) // Simulate fading effect\n            }\n\n            // Limit number of echoes\n            if (echoes.length > maxEchoes) {\n                echoes[0].destroy()\n                echoes.shift()\n            }\n        })\n    }\n    //% block=\"glitch pulse $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchPulse(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Randomly shift pixels in small areas\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 2)\n                let y = randint(0, img.height - 2)\n\n                let color1 = img.getPixel(x, y)\n                let color2 = img.getPixel(x + 1, y + 1)\n\n                img.setPixel(x, y, color2)\n                img.setPixel(x + 1, y + 1, color1)\n            }\n\n            // Randomly invert some pixels\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, randint(1, 15)) // Assign random color\n            }\n\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"glitch distort $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchDistort(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Randomly shift small pixel regions\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 2)\n                let y = randint(0, img.height - 2)\n\n                let color1 = img.getPixel(x, y)\n                let color2 = img.getPixel(x + 1, y + 1)\n\n                img.setPixel(x, y, color2)\n                img.setPixel(x + 1, y + 1, color1)\n            }\n\n            // Randomly insert glitchy pixels\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, randint(1, 15)) // Assigns random colors\n            }\n\n            sprite.setImage(img) // Updates sprite image with corruption effect\n        })\n    }\n    // Block for MakeCode extension\n    //% block=\"stretch $sprite horizontally $scaleX vertically $scaleY\"\n    //% scaleX.defl=2 scaleY.defl=2\n    //%sprite.shadow=variables_get\n   export function stretch(sprite: Sprite, scaleX: number, scaleY: number) {\n        stretchSprite(sprite, scaleX, scaleY)\n    }\n    // Function to stretch a sprite\n    function stretchSprite(sprite: Sprite, scaleX: number, scaleY: number) {\n        let img = sprite.image\n        let newWidth = img.width * scaleX\n        let newHeight = img.height * scaleY\n        let newImg = image.create(newWidth, newHeight)\n\n        for (let x = 0; x < newWidth; x++) {\n            for (let y = 0; y < newHeight; y++) {\n                let srcX = Math.floor(x / scaleX)\n                let srcY = Math.floor(y / scaleY)\n                newImg.setPixel(x, y, img.getPixel(srcX, srcY))\n            }\n        }\n\n        sprite.setImage(newImg)\n    }\n    // Define the Glitch effect block\n    //%block=\"apply Glitch Effect with intensity $intensity\"\n  export function applyGlitchEffect(intensity: number) {\n        let glitchDuration = 100;  // Duration of each glitch square in milliseconds\n        let squareSize = Math.randomRange(5, 30);  // Random size of the square\n\n        // Generate a random number of white squares on the screen\n        for (let i = 0; i < intensity; i++) {\n            // Random position for the glitch square\n            let x = Math.randomRange(0, screen.width);\n            let y = Math.randomRange(0, screen.height);\n\n            // Create a white square (this simulates the glitch)\n            let square = sprites.create(img`\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n            `, SpriteKind.Player);\n\n            square.setPosition(x, y);\n            square.setImage(img` \n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            `);\n\n            square.image.fill(15); // White square\n            square.setFlag(SpriteFlag.Invisible, false);\n\n            // Remove the square after a short glitch duration\n            pause(glitchDuration);\n            square.destroy();\n        }\n    }\n}","pxt.json":"{\n    \"name\": \"Glitch effect extension\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"U.ts\",\n        \"Uu.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1743335714102,"editorVersion":"2.0.40","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable><variable id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</variable><variable id=\"X^G7DJq%`I7BxldfzkoR\">y5</variable><variable id=\"r[rl(/Zr7nYsjhF0w)^2\">myImage</variable><variable id=\"iy]Tgaljii_#DWU?Co1/\">Screen</variable><variable id=\"$hxAxr#;d!8NbNVROVm,\">picture</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.x@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">160</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.y@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">120</field></shadow></value></block></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"duration\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"625\" y=\"20\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","main.ts":"","README.md":" ","assets.json":"","U.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","Uu.ts":"// Add your code here\nnamespace glitchEffect {\n    //% block=\"corrupt $sprite over $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.shadow=timePicker\n    export function corruptSprite(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let corrupted = original.clone()\n        let endTime = game.runtime() + duration\n\n        game.onUpdateInterval(50, function () {\n            if (game.runtime() > endTime) return\n\n            // **Randomly change pixels**\n            for (let i = 0; i < corrupted.width * 0.2; i++) { // 20% of pixels change\n                let x = randint(0, corrupted.width - 1)\n                let y = randint(0, corrupted.height - 1)\n                let glitchColor = randint(2, 14) // Random colors\n                corrupted.setPixel(x, y, glitchColor)\n            }\n\n            // **Slight screen shake**\n            sprite.x += randint(-1, 1)\n            sprite.y += randint(-1, 1)\n\n            // **Apply corruption**\n            sprite.setImage(corrupted)\n        })\n\n        // **Slow fade out effect**\n        control.runInParallel(function () {\n            for (let i = 15; i >= 0; i--) {\n                let faded = corrupted.clone()\n                for (let x = 0; x < faded.width; x++) {\n                    for (let y = 0; y < faded.height; y++) {\n                        if (faded.getPixel(x, y) != 0) faded.setPixel(x, y, i)\n                    }\n                }\n                sprite.setImage(faded)\n                pause(80) // **Wait before the next fade step**\n            }\n            sprite.setImage(img``) // **Sprite disappears**\n        })\n    }\n        //% block=\"glitch shake $sprite for $duration ms\"\n        //% sprite.shadow=variables_get\n        //% duration.shadow=timePicker\n        export function glitchShake(sprite: Sprite, duration: number) {\n            let endTime = game.runtime() + duration\n\n            game.onUpdateInterval(50, function () {\n                if (game.runtime() > endTime) return\n\n                sprite.x += randint(-2, 2)\n                sprite.y += randint(-2, 2)\n            })\n        }\n        //% block=\"enable afterimage effect on $sprite\"\n        //% sprite.shadow=variables_get\n        export function afterimageEffect(sprite: Sprite) {\n            game.onUpdateInterval(100, function () {\n                let ghost = sprite.image.clone()\n                let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n                ghostSprite.setPosition(sprite.x, sprite.y)\n                ghostSprite.setFlag(SpriteFlag.Ghost, true)\n                ghostSprite.setFlag(SpriteFlag.AutoDestroy, true)\n                ghostSprite.lifespan = 200\n                ghostSprite.image.replace(1, 3) // Make it slightly faded\n            })\n        }\n        //% block=\"pixel shift $sprite intensity $intensity every $interval ms\"\n        //% sprite.shadow=variables_get\n        //% intensity.min=1 intensity.max=5\n        //% interval.shadow=timePicker\n        export function pixelShift(sprite: Sprite, intensity: number, interval: number) {\n            game.onUpdateInterval(interval, function () {\n                let img = sprite.image.clone()\n                for (let x = 0; x < img.width; x++) {\n                    for (let y = 0; y < img.height; y++) {\n                        if (Math.percentChance(30)) { // Randomly shift some pixels\n                            let dx = x + randint(-intensity, intensity)\n                            let dy = y + randint(-intensity, intensity)\n\n                            if (dx >= 0 && dx < img.width && dy >= 0 && dy < img.height) {\n                                img.setPixel(x, y, sprite.image.getPixel(dx, dy))\n                            }\n                        }\n                    }\n                }\n                sprite.setImage(img)\n            })\n        }\n    //% block=\"apply scanline overlay to $sprite with spacing $spacing\"\n    //% sprite.shadow=variables_get\n    //% spacing.min=1 spacing.max=10\n    export function scanlineOverlay(sprite: Sprite, spacing: number) {\n        let img = sprite.image.clone()\n        for (let y = 0; y < img.height; y += spacing) {\n            for (let x = 0; x < img.width; x++) {\n                img.setPixel(x, y, 0) // Black scanline\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply hue shift to $sprite with shift $amount\"\n    //% sprite.shadow=variables_get\n    //% amount.min=1 amount.max=255\n    export function hueShift(sprite: Sprite, amount: number) {\n        let img = sprite.image.clone()\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let oldColor = img.getPixel(x, y)\n                if (oldColor !== 0) { // Avoid shifting transparent pixels\n                    let newColor = (oldColor + amount) % 15 // Wrap colors around\n                    img.setPixel(x, y, newColor)\n                }\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply outline plus to $sprite with color $color\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    export function outlinePlus(sprite: Sprite, color: number) {\n        let img = sprite.image.clone()\n        let outlinedImg = image.create(img.width + 2, img.height + 2)\n\n        // Copy original image into the center of new image\n        outlinedImg.drawTransparentImage(img, 1, 1)\n\n        // Loop through each pixel and add an outline\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                if (img.getPixel(x, y) != 0) { // Not transparent\n                    for (let dx = -1; dx <= 1; dx++) {\n                        for (let dy = -1; dy <= 1; dy++) {\n                            if (outlinedImg.getPixel(x + dx + 1, y + dy + 1) == 0) {\n                                outlinedImg.setPixel(x + dx + 1, y + dy + 1, color)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        sprite.setImage(outlinedImg)\n    }\n    //% block=\"apply afterimage trail to $sprite with color $color lasting $duration ms\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    //% duration.min=50 duration.max=1000\n    export function afterimageTrail(sprite: Sprite, color: number, duration: number) {\n        game.onUpdateInterval(50, function () {\n            let ghost = image.create(sprite.width, sprite.height)\n            ghost.drawTransparentImage(sprite.image, 0, 0)\n            ghost.replace(1, color) // Tint effect\n            let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n            ghostSprite.setPosition(sprite.x, sprite.y)\n            ghostSprite.lifespan = duration // Fades out\n            ghostSprite.z = -1 // Keeps it behind the main sprite\n        })\n    }\n    //% block=\"shake screen for $duration ms with intensity $intensity\"\n    //% duration.min=50 duration.max=2000\n    //% intensity.min=1 intensity.max=10\n    export function screenShake(duration: number, intensity: number) {\n        let endTime = game.runtime() + duration\n        game.onUpdate(function () {\n            if (game.runtime() < endTime) {\n                scene.cameraShake(intensity, 50)\n            }\n        })\n    }\n    //% block=\"flash $sprite for $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.min=50 duration.max=1000\n    export function flash(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let flashImage = sprite.image.clone()\n        flashImage.replace(1, 15) // Turn white\n        sprite.setImage(flashImage)\n        pause(500)\n            sprite.setImage(original)\n    }\n    //% block=\"apply glitch effect to $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchEffect(sprite: Sprite) {\n        game.onUpdateInterval(200, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 5; i++) {\n                img.setPixel(randint(0, img.width - 1), randint(0, img.height - 1), randint(1, 15))\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply time fragmentation to $sprite\"\n    //% sprite.shadow=variables_get\n    export function timeFragmentation(sprite: Sprite) {\n        let ghostImages: Image[] = []\n        let ghostPositions: number[][] = []\n\n        game.onUpdateInterval(100, function () {\n            // Store old positions & images\n            if (ghostImages.length > 5) {\n                ghostImages.shift()\n                ghostPositions.shift()\n            }\n            ghostImages.push(sprite.image.clone())\n            ghostPositions.push([sprite.x, sprite.y])\n\n            // Randomly decide which ghosts to show\n            for (let i = 0; i < ghostImages.length; i++) {\n                if (Math.percentChance(70)) {\n                    screen.drawTransparentImage(ghostImages[i], ghostPositions[i][0] + randint(-3, 3), ghostPositions[i][1] + randint(-3, 3))\n                }\n            }\n        })\n    }\n    //% block=\"collapse sprite into itself $sprite\"\n    //% sprite.shadow=variables_get\n    export function screenCollapse(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let centerX = img.width >> 1\n        let centerY = img.height >> 1\n\n        game.onUpdateInterval(200, function () {\n            let newImg = img.clone()\n            for (let x = 0; x < img.width; x++) {\n                for (let y = 0; y < img.height; y++) {\n                    let dx = x - centerX\n                    let dy = y - centerY\n                    let angle = Math.atan2(dy, dx) + Math.PI / 12 // Slight spin\n                    let radius = Math.sqrt(dx * dx + dy * dy) * 0.9 // Shrinking inwards\n\n                    let newX = Math.round(centerX + Math.cos(angle) * radius)\n                    let newY = Math.round(centerY + Math.sin(angle) * radius)\n\n                    if (newX >= 0 && newX < img.width && newY >= 0 && newY < img.height) {\n                        newImg.setPixel(x, y, img.getPixel(newX, newY))\n                    }\n                }\n            }\n            sprite.setImage(newImg)\n        })\n    }\n    //% block=\"apply color out of space to $sprite\"\n    //% sprite.shadow=variables_get\n    export function colorOutOfSpace(sprite: Sprite) {\n        game.onUpdateInterval(150, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                let color = img.getPixel(x, y)\n                img.setPixel(x, y, 15 - color) // Invert color\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply entity distortion to $sprite\"\n    //% sprite.shadow=variables_get\n    export function entityDistortion(sprite: Sprite) {\n        game.onUpdateInterval(200, function () {\n            let img = sprite.image.clone()\n            let offsetX = randint(-2, 2)\n            let offsetY = randint(-2, 2)\n\n            let newImg = img.clone()\n            for (let x = 0; x < img.width; x++) {\n                for (let y = 0; y < img.height; y++) {\n                    let newX = x + offsetX\n                    let newY = y + offsetY\n                    if (newX >= 0 && newX < img.width && newY >= 0 && newY < img.height) {\n                        newImg.setPixel(newX, newY, img.getPixel(x, y))\n                    }\n                }\n            }\n            sprite.setImage(newImg)\n        })\n    }\n    //% block=\"apply anomaly breakdown to $sprite\"\n    //% sprite.shadow=variables_get\n    export function anomalyBreakdown(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, 0) // Set to transparent\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply dripping shadow to $sprite\"\n    //% sprite.shadow=variables_get\n    export function drippingShadow(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Create the \"drip\" effect\n            for (let x = 0; x < img.width; x++) {\n                for (let y = img.height - 1; y > 0; y--) {\n                    if (img.getPixel(x, y - 1) > 0 && Math.percentChance(20)) {\n                        img.setPixel(x, y, img.getPixel(x, y - 1)) // Copy pixel down\n                        img.setPixel(x, y - 1, 0) // Erase original to create \"drip\"\n                    }\n                }\n            }\n\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"shatter $sprite\"\n    //% sprite.shadow=variables_get\n    export function shatterEffect(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let particles: { x: number; y: number; vx: number; vy: number; color: number }[] = []\n\n        // Turn pixels into flying particles\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let color = img.getPixel(x, y)\n                if (color != 0) {\n                    particles.push({\n                        x: sprite.x + x - img.width / 2,\n                        y: sprite.y + y - img.height / 2,\n                        vx: Math.randomRange(-30, 30) / 10,\n                        vy: Math.randomRange(-30, 30) / 10,\n                        color: color\n                    })\n                }\n            }\n        }\n\n        // Remove the original sprite\n        sprite.setFlag(SpriteFlag.Invisible, true)\n\n        // Animate particles\n        game.onUpdateInterval(50, function () {\n            screen.fill(0)\n            for (let i = 0; i < particles.length; i++) {\n                let p = particles[i]\n                screen.setPixel(p.x, p.y, p.color)\n                p.x += p.vx\n                p.y += p.vy\n                p.vy += 0.5 // Simulated gravity\n            }\n        })\n    }\n    //% block=\"glitch warp $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchWarp(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let frames = 10 // Number of \"glitch frames\"\n\n        game.onUpdateInterval(100, function () {\n            if (frames > 0) {\n                let offsetX = Math.randomRange(-3, 3)\n                let offsetY = Math.randomRange(-3, 3)\n\n                let glitchImg = img.clone()\n\n                // Shift horizontal slices randomly\n                for (let y = 0; y < glitchImg.height; y += 2) {\n                    let shift = Math.randomRange(-5, 5)\n                    for (let x = 0; x < glitchImg.width; x++) {\n                        let color = img.getPixel((x + shift + glitchImg.width) % glitchImg.width, y)\n                        glitchImg.setPixel(x, y, color)\n                    }\n                }\n\n                // Randomly invert colors\n                if (Math.percentChance(30)) {\n                    for (let x = 0; x < glitchImg.width; x++) {\n                        for (let y = 0; y < glitchImg.height; y++) {\n                            let color = glitchImg.getPixel(x, y)\n                            glitchImg.setPixel(x, y, 15 - color) // Invert colors\n                        }\n                    }\n                }\n\n                // Randomly \"teleport\" sprite\n                if (Math.percentChance(15)) {\n                    sprite.setPosition(\n                        sprite.x + Math.randomRange(-10, 10),\n                        sprite.y + Math.randomRange(-10, 10)\n                    )\n                }\n\n                sprite.setImage(glitchImg)\n                frames--\n            } else {\n                sprite.setImage(img) // Reset to normal after glitching\n            }\n        })\n    }\n    //% block=\"temporal echo $sprite\"\n    //% sprite.shadow=variables_get\n    export function temporalEcho(sprite: Sprite) {\n        let echoes: Sprite[] = []\n        let maxEchoes = 5 // Number of echoes\n        let decayRate = 50 // How quickly echoes fade\n\n        game.onUpdateInterval(100, function () {\n            // Create a new echo\n            let echo = sprites.create(sprite.image.clone(), SpriteKind.Food)\n            echo.setPosition(sprite.x, sprite.y)\n            echo.setFlag(SpriteFlag.Ghost, true) // Prevent interaction\n            echoes.push(echo)\n\n            // Slowly fade echoes\n            for (let i = 0; i < echoes.length; i++) {\n                let fadeAmount = Math.max(0, 15 - (i * 3)) // Decrease brightness per echo\n                echoes[i].image.replace(15, fadeAmount) // Simulate fading effect\n            }\n\n            // Limit number of echoes\n            if (echoes.length > maxEchoes) {\n                echoes[0].destroy()\n                echoes.shift()\n            }\n        })\n    }\n    //% block=\"glitch pulse $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchPulse(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Randomly shift pixels in small areas\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 2)\n                let y = randint(0, img.height - 2)\n\n                let color1 = img.getPixel(x, y)\n                let color2 = img.getPixel(x + 1, y + 1)\n\n                img.setPixel(x, y, color2)\n                img.setPixel(x + 1, y + 1, color1)\n            }\n\n            // Randomly invert some pixels\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, randint(1, 15)) // Assign random color\n            }\n\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"glitch distort $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchDistort(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Randomly shift small pixel regions\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 2)\n                let y = randint(0, img.height - 2)\n\n                let color1 = img.getPixel(x, y)\n                let color2 = img.getPixel(x + 1, y + 1)\n\n                img.setPixel(x, y, color2)\n                img.setPixel(x + 1, y + 1, color1)\n            }\n\n            // Randomly insert glitchy pixels\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, randint(1, 15)) // Assigns random colors\n            }\n\n            sprite.setImage(img) // Updates sprite image with corruption effect\n        })\n    }\n    // Block for MakeCode extension\n    //% block=\"stretch $sprite horizontally $scaleX vertically $scaleY\"\n    //% scaleX.defl=2 scaleY.defl=2\n    //%sprite.shadow=variables_get\n   export function stretch(sprite: Sprite, scaleX: number, scaleY: number) {\n        stretchSprite(sprite, scaleX, scaleY)\n    }\n    // Function to stretch a sprite\n    function stretchSprite(sprite: Sprite, scaleX: number, scaleY: number) {\n        let img = sprite.image\n        let newWidth = img.width * scaleX\n        let newHeight = img.height * scaleY\n        let newImg = image.create(newWidth, newHeight)\n\n        for (let x = 0; x < newWidth; x++) {\n            for (let y = 0; y < newHeight; y++) {\n                let srcX = Math.floor(x / scaleX)\n                let srcY = Math.floor(y / scaleY)\n                newImg.setPixel(x, y, img.getPixel(srcX, srcY))\n            }\n        }\n\n        sprite.setImage(newImg)\n    }\n    // Define the Glitch effect block\n    //%block=\"apply Glitch Effect with intensity $intensity\"\n  export function applyGlitchEffect(intensity: number) {\n        let glitchDuration = 100;  // Duration of each glitch square in milliseconds\n        let squareSize = Math.randomRange(5, 30);  // Random size of the square\n\n        // Generate a random number of white squares on the screen\n        for (let i = 0; i < intensity; i++) {\n            // Random position for the glitch square\n            let x = Math.randomRange(0, screen.width);\n            let y = Math.randomRange(0, screen.height);\n\n            // Create a white square (this simulates the glitch)\n            let square = sprites.create(img`\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n            `, SpriteKind.Player);\n\n            square.setPosition(x, y);\n            square.setImage(img` \n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            `);\n\n            square.image.fill(15); // White square\n            square.setFlag(SpriteFlag.Invisible, false);\n\n            // Remove the square after a short glitch duration\n            pause(glitchDuration);\n            square.destroy();\n        }\n    }\n}","pxt.json":"{\n    \"name\": \"Glitch effect extension\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"U.ts\",\n        \"Uu.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1743860769715,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"G9t2f1t?MQMDlLL[y?0}\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"|BSjm*X9GwES*Qs~*?cP\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tB,Za*P(,Kp-XC+-MmuM\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"6%}7*/ZP$(ch%BCb0gMO\">Enemy</variable><variable id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</variable><variable id=\"qIA)#Bmz`H^5J[0{.xNp\">item</variable><variable id=\"2qmO+p}-NLe^VKtKhHZ(\">x3</variable><variable id=\"X^G7DJq%`I7BxldfzkoR\">y5</variable><variable id=\"r[rl(/Zr7nYsjhF0w)^2\">myImage</variable><variable id=\"iy]Tgaljii_#DWU?Co1/\">Screen</variable><variable id=\"$hxAxr#;d!8NbNVROVm,\">picture</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"gamesetbackgroundcolor\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . 1 1 1 1 1 . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.x@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">160</field></shadow></value></block></value><next><block type=\"Sprite_blockCombine_set\"><field name=\"property\">Sprite.y@set</field><value name=\"mySprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\"><value name=\"min\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><shadow type=\"math_number\"><field name=\"NUM\">120</field></shadow></value></block></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e.{i2rN|FaL70X*ug3Oy\">mySprite</field></block></value><value name=\"duration\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"605\" y=\"0\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ay@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"Sprite_blockCombine_change\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"property\">Sprite.ax@set</field><value name=\"mySprite\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"qIA)#Bmz`H^5J[0{.xNp\">item</field></block></value><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","main.ts":"","README.md":" ","assets.json":"","U.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","Uu.ts":"// Add your code here\nnamespace glitchEffect {\n    //% block=\"corrupt $sprite over $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.shadow=timePicker\n    export function corruptSprite(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let corrupted = original.clone()\n        let endTime = game.runtime() + duration\n\n        game.onUpdateInterval(50, function () {\n            if (game.runtime() > endTime) return\n\n            // **Randomly change pixels**\n            for (let i = 0; i < corrupted.width * 0.2; i++) { // 20% of pixels change\n                let x = randint(0, corrupted.width - 1)\n                let y = randint(0, corrupted.height - 1)\n                let glitchColor = randint(2, 14) // Random colors\n                corrupted.setPixel(x, y, glitchColor)\n            }\n\n            // **Slight screen shake**\n            sprite.x += randint(-1, 1)\n            sprite.y += randint(-1, 1)\n\n            // **Apply corruption**\n            sprite.setImage(corrupted)\n        })\n\n        // **Slow fade out effect**\n        control.runInParallel(function () {\n            for (let i = 15; i >= 0; i--) {\n                let faded = corrupted.clone()\n                for (let x = 0; x < faded.width; x++) {\n                    for (let y = 0; y < faded.height; y++) {\n                        if (faded.getPixel(x, y) != 0) faded.setPixel(x, y, i)\n                    }\n                }\n                sprite.setImage(faded)\n                pause(80) // **Wait before the next fade step**\n            }\n            sprite.setImage(img``) // **Sprite disappears**\n        })\n    }\n        //% block=\"glitch shake $sprite for $duration ms\"\n        //% sprite.shadow=variables_get\n        //% duration.shadow=timePicker\n        export function glitchShake(sprite: Sprite, duration: number) {\n            let endTime = game.runtime() + duration\n\n            game.onUpdateInterval(50, function () {\n                if (game.runtime() > endTime) return\n\n                sprite.x += randint(-2, 2)\n                sprite.y += randint(-2, 2)\n            })\n        }\n        //% block=\"enable afterimage effect on $sprite\"\n        //% sprite.shadow=variables_get\n        export function afterimageEffect(sprite: Sprite) {\n            game.onUpdateInterval(100, function () {\n                let ghost = sprite.image.clone()\n                let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n                ghostSprite.setPosition(sprite.x, sprite.y)\n                ghostSprite.setFlag(SpriteFlag.Ghost, true)\n                ghostSprite.setFlag(SpriteFlag.AutoDestroy, true)\n                ghostSprite.lifespan = 200\n                ghostSprite.image.replace(1, 3) // Make it slightly faded\n            })\n        }\n        //% block=\"pixel shift $sprite intensity $intensity every $interval ms\"\n        //% sprite.shadow=variables_get\n        //% intensity.min=1 intensity.max=5\n        //% interval.shadow=timePicker\n        export function pixelShift(sprite: Sprite, intensity: number, interval: number) {\n            game.onUpdateInterval(interval, function () {\n                let img = sprite.image.clone()\n                for (let x = 0; x < img.width; x++) {\n                    for (let y = 0; y < img.height; y++) {\n                        if (Math.percentChance(30)) { // Randomly shift some pixels\n                            let dx = x + randint(-intensity, intensity)\n                            let dy = y + randint(-intensity, intensity)\n\n                            if (dx >= 0 && dx < img.width && dy >= 0 && dy < img.height) {\n                                img.setPixel(x, y, sprite.image.getPixel(dx, dy))\n                            }\n                        }\n                    }\n                }\n                sprite.setImage(img)\n            })\n        }\n    //% block=\"apply scanline overlay to $sprite with spacing $spacing\"\n    //% sprite.shadow=variables_get\n    //% spacing.min=1 spacing.max=10\n    export function scanlineOverlay(sprite: Sprite, spacing: number) {\n        let img = sprite.image.clone()\n        for (let y = 0; y < img.height; y += spacing) {\n            for (let x = 0; x < img.width; x++) {\n                img.setPixel(x, y, 0) // Black scanline\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply hue shift to $sprite with shift $amount\"\n    //% sprite.shadow=variables_get\n    //% amount.min=1 amount.max=255\n    export function hueShift(sprite: Sprite, amount: number) {\n        let img = sprite.image.clone()\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let oldColor = img.getPixel(x, y)\n                if (oldColor !== 0) { // Avoid shifting transparent pixels\n                    let newColor = (oldColor + amount) % 15 // Wrap colors around\n                    img.setPixel(x, y, newColor)\n                }\n            }\n        }\n        sprite.setImage(img)\n    }\n    //% block=\"apply outline plus to $sprite with color $color\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    export function outlinePlus(sprite: Sprite, color: number) {\n        let img = sprite.image.clone()\n        let outlinedImg = image.create(img.width + 2, img.height + 2)\n\n        // Copy original image into the center of new image\n        outlinedImg.drawTransparentImage(img, 1, 1)\n\n        // Loop through each pixel and add an outline\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                if (img.getPixel(x, y) != 0) { // Not transparent\n                    for (let dx = -1; dx <= 1; dx++) {\n                        for (let dy = -1; dy <= 1; dy++) {\n                            if (outlinedImg.getPixel(x + dx + 1, y + dy + 1) == 0) {\n                                outlinedImg.setPixel(x + dx + 1, y + dy + 1, color)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        sprite.setImage(outlinedImg)\n    }\n    //% block=\"apply afterimage trail to $sprite with color $color lasting $duration ms\"\n    //% sprite.shadow=variables_get\n    //% color.shadow=colorindexpicker\n    //% duration.min=50 duration.max=1000\n    export function afterimageTrail(sprite: Sprite, color: number, duration: number) {\n        game.onUpdateInterval(50, function () {\n            let ghost = image.create(sprite.width, sprite.height)\n            ghost.drawTransparentImage(sprite.image, 0, 0)\n            ghost.replace(1, color) // Tint effect\n            let ghostSprite = sprites.create(ghost, SpriteKind.Food)\n            ghostSprite.setPosition(sprite.x, sprite.y)\n            ghostSprite.lifespan = duration // Fades out\n            ghostSprite.z = -1 // Keeps it behind the main sprite\n        })\n    }\n    //% block=\"shake screen for $duration ms with intensity $intensity\"\n    //% duration.min=50 duration.max=2000\n    //% intensity.min=1 intensity.max=10\n    export function screenShake(duration: number, intensity: number) {\n        let endTime = game.runtime() + duration\n        game.onUpdate(function () {\n            if (game.runtime() < endTime) {\n                scene.cameraShake(intensity, 50)\n            }\n        })\n    }\n    //% block=\"flash $sprite for $duration ms\"\n    //% sprite.shadow=variables_get\n    //% duration.min=50 duration.max=1000\n    export function flash(sprite: Sprite, duration: number) {\n        let original = sprite.image.clone()\n        let flashImage = sprite.image.clone()\n        flashImage.replace(1, 15) // Turn white\n        sprite.setImage(flashImage)\n        pause(500)\n            sprite.setImage(original)\n    }\n    //% block=\"apply glitch effect to $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchEffect(sprite: Sprite) {\n        game.onUpdateInterval(200, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 5; i++) {\n                img.setPixel(randint(0, img.width - 1), randint(0, img.height - 1), randint(1, 15))\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply time fragmentation to $sprite\"\n    //% sprite.shadow=variables_get\n    export function timeFragmentation(sprite: Sprite) {\n        let ghostImages: Image[] = []\n        let ghostPositions: number[][] = []\n\n        game.onUpdateInterval(100, function () {\n            // Store old positions & images\n            if (ghostImages.length > 5) {\n                ghostImages.shift()\n                ghostPositions.shift()\n            }\n            ghostImages.push(sprite.image.clone())\n            ghostPositions.push([sprite.x, sprite.y])\n\n            // Randomly decide which ghosts to show\n            for (let i = 0; i < ghostImages.length; i++) {\n                if (Math.percentChance(70)) {\n                    screen.drawTransparentImage(ghostImages[i], ghostPositions[i][0] + randint(-3, 3), ghostPositions[i][1] + randint(-3, 3))\n                }\n            }\n        })\n    }\n    //% block=\"collapse sprite into itself $sprite\"\n    //% sprite.shadow=variables_get\n    export function screenCollapse(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let centerX = img.width >> 1\n        let centerY = img.height >> 1\n\n        game.onUpdateInterval(200, function () {\n            let newImg = img.clone()\n            for (let x = 0; x < img.width; x++) {\n                for (let y = 0; y < img.height; y++) {\n                    let dx = x - centerX\n                    let dy = y - centerY\n                    let angle = Math.atan2(dy, dx) + Math.PI / 12 // Slight spin\n                    let radius = Math.sqrt(dx * dx + dy * dy) * 0.9 // Shrinking inwards\n\n                    let newX = Math.round(centerX + Math.cos(angle) * radius)\n                    let newY = Math.round(centerY + Math.sin(angle) * radius)\n\n                    if (newX >= 0 && newX < img.width && newY >= 0 && newY < img.height) {\n                        newImg.setPixel(x, y, img.getPixel(newX, newY))\n                    }\n                }\n            }\n            sprite.setImage(newImg)\n        })\n    }\n    //% block=\"apply color out of space to $sprite\"\n    //% sprite.shadow=variables_get\n    export function colorOutOfSpace(sprite: Sprite) {\n        game.onUpdateInterval(150, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                let color = img.getPixel(x, y)\n                img.setPixel(x, y, 15 - color) // Invert color\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply entity distortion to $sprite\"\n    //% sprite.shadow=variables_get\n    export function entityDistortion(sprite: Sprite) {\n        game.onUpdateInterval(200, function () {\n            let img = sprite.image.clone()\n            let offsetX = randint(-2, 2)\n            let offsetY = randint(-2, 2)\n\n            let newImg = img.clone()\n            for (let x = 0; x < img.width; x++) {\n                for (let y = 0; y < img.height; y++) {\n                    let newX = x + offsetX\n                    let newY = y + offsetY\n                    if (newX >= 0 && newX < img.width && newY >= 0 && newY < img.height) {\n                        newImg.setPixel(newX, newY, img.getPixel(x, y))\n                    }\n                }\n            }\n            sprite.setImage(newImg)\n        })\n    }\n    //% block=\"apply anomaly breakdown to $sprite\"\n    //% sprite.shadow=variables_get\n    export function anomalyBreakdown(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, 0) // Set to transparent\n            }\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"apply dripping shadow to $sprite\"\n    //% sprite.shadow=variables_get\n    export function drippingShadow(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Create the \"drip\" effect\n            for (let x = 0; x < img.width; x++) {\n                for (let y = img.height - 1; y > 0; y--) {\n                    if (img.getPixel(x, y - 1) > 0 && Math.percentChance(20)) {\n                        img.setPixel(x, y, img.getPixel(x, y - 1)) // Copy pixel down\n                        img.setPixel(x, y - 1, 0) // Erase original to create \"drip\"\n                    }\n                }\n            }\n\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"shatter $sprite\"\n    //% sprite.shadow=variables_get\n    export function shatterEffect(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let particles: { x: number; y: number; vx: number; vy: number; color: number }[] = []\n\n        // Turn pixels into flying particles\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                let color = img.getPixel(x, y)\n                if (color != 0) {\n                    particles.push({\n                        x: sprite.x + x - img.width / 2,\n                        y: sprite.y + y - img.height / 2,\n                        vx: Math.randomRange(-30, 30) / 10,\n                        vy: Math.randomRange(-30, 30) / 10,\n                        color: color\n                    })\n                }\n            }\n        }\n\n        // Remove the original sprite\n        sprite.setFlag(SpriteFlag.Invisible, true)\n\n        // Animate particles\n        game.onUpdateInterval(50, function () {\n            screen.fill(0)\n            for (let i = 0; i < particles.length; i++) {\n                let p = particles[i]\n                screen.setPixel(p.x, p.y, p.color)\n                p.x += p.vx\n                p.y += p.vy\n                p.vy += 0.5 // Simulated gravity\n            }\n        })\n    }\n    //% block=\"glitch warp $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchWarp(sprite: Sprite) {\n        let img = sprite.image.clone()\n        let frames = 10 // Number of \"glitch frames\"\n\n        game.onUpdateInterval(100, function () {\n            if (frames > 0) {\n                let offsetX = Math.randomRange(-3, 3)\n                let offsetY = Math.randomRange(-3, 3)\n\n                let glitchImg = img.clone()\n\n                // Shift horizontal slices randomly\n                for (let y = 0; y < glitchImg.height; y += 2) {\n                    let shift = Math.randomRange(-5, 5)\n                    for (let x = 0; x < glitchImg.width; x++) {\n                        let color = img.getPixel((x + shift + glitchImg.width) % glitchImg.width, y)\n                        glitchImg.setPixel(x, y, color)\n                    }\n                }\n\n                // Randomly invert colors\n                if (Math.percentChance(30)) {\n                    for (let x = 0; x < glitchImg.width; x++) {\n                        for (let y = 0; y < glitchImg.height; y++) {\n                            let color = glitchImg.getPixel(x, y)\n                            glitchImg.setPixel(x, y, 15 - color) // Invert colors\n                        }\n                    }\n                }\n\n                // Randomly \"teleport\" sprite\n                if (Math.percentChance(15)) {\n                    sprite.setPosition(\n                        sprite.x + Math.randomRange(-10, 10),\n                        sprite.y + Math.randomRange(-10, 10)\n                    )\n                }\n\n                sprite.setImage(glitchImg)\n                frames--\n            } else {\n                sprite.setImage(img) // Reset to normal after glitching\n            }\n        })\n    }\n    //% block=\"temporal echo $sprite\"\n    //% sprite.shadow=variables_get\n    export function temporalEcho(sprite: Sprite) {\n        let echoes: Sprite[] = []\n        let maxEchoes = 5 // Number of echoes\n        let decayRate = 50 // How quickly echoes fade\n\n        game.onUpdateInterval(100, function () {\n            // Create a new echo\n            let echo = sprites.create(sprite.image.clone(), SpriteKind.Food)\n            echo.setPosition(sprite.x, sprite.y)\n            echo.setFlag(SpriteFlag.Ghost, true) // Prevent interaction\n            echoes.push(echo)\n\n            // Slowly fade echoes\n            for (let i = 0; i < echoes.length; i++) {\n                let fadeAmount = Math.max(0, 15 - (i * 3)) // Decrease brightness per echo\n                echoes[i].image.replace(15, fadeAmount) // Simulate fading effect\n            }\n\n            // Limit number of echoes\n            if (echoes.length > maxEchoes) {\n                echoes[0].destroy()\n                echoes.shift()\n            }\n        })\n    }\n    //% block=\"glitch pulse $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchPulse(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Randomly shift pixels in small areas\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 2)\n                let y = randint(0, img.height - 2)\n\n                let color1 = img.getPixel(x, y)\n                let color2 = img.getPixel(x + 1, y + 1)\n\n                img.setPixel(x, y, color2)\n                img.setPixel(x + 1, y + 1, color1)\n            }\n\n            // Randomly invert some pixels\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, randint(1, 15)) // Assign random color\n            }\n\n            sprite.setImage(img)\n        })\n    }\n    //% block=\"glitch distort $sprite\"\n    //% sprite.shadow=variables_get\n    export function glitchDistort(sprite: Sprite) {\n        game.onUpdateInterval(100, function () {\n            let img = sprite.image.clone()\n\n            // Randomly shift small pixel regions\n            for (let i = 0; i < 10; i++) {\n                let x = randint(0, img.width - 2)\n                let y = randint(0, img.height - 2)\n\n                let color1 = img.getPixel(x, y)\n                let color2 = img.getPixel(x + 1, y + 1)\n\n                img.setPixel(x, y, color2)\n                img.setPixel(x + 1, y + 1, color1)\n            }\n\n            // Randomly insert glitchy pixels\n            for (let i = 0; i < 5; i++) {\n                let x = randint(0, img.width - 1)\n                let y = randint(0, img.height - 1)\n                img.setPixel(x, y, randint(1, 15)) // Assigns random colors\n            }\n\n            sprite.setImage(img) // Updates sprite image with corruption effect\n        })\n    }\n    // Block for MakeCode extension\n    //% block=\"stretch $sprite horizontally $scaleX vertically $scaleY\"\n    //% scaleX.defl=2 scaleY.defl=2\n    //%sprite.shadow=variables_get\n   export function stretch(sprite: Sprite, scaleX: number, scaleY: number) {\n        stretchSprite(sprite, scaleX, scaleY)\n    }\n    // Function to stretch a sprite\n    function stretchSprite(sprite: Sprite, scaleX: number, scaleY: number) {\n        let img = sprite.image\n        let newWidth = img.width * scaleX\n        let newHeight = img.height * scaleY\n        let newImg = image.create(newWidth, newHeight)\n\n        for (let x = 0; x < newWidth; x++) {\n            for (let y = 0; y < newHeight; y++) {\n                let srcX = Math.floor(x / scaleX)\n                let srcY = Math.floor(y / scaleY)\n                newImg.setPixel(x, y, img.getPixel(srcX, srcY))\n            }\n        }\n\n        sprite.setImage(newImg)\n    }\n    // Define the Glitch effect block\n    //%block=\"apply Glitch Effect with intensity $intensity\"\n  export function applyGlitchEffect(intensity: number) {\n        let glitchDuration = 100;  // Duration of each glitch square in milliseconds\n        let squareSize = Math.randomRange(5, 30);  // Random size of the square\n\n        // Generate a random number of white squares on the screen\n        for (let i = 0; i < intensity; i++) {\n            // Random position for the glitch square\n            let x = Math.randomRange(0, screen.width);\n            let y = Math.randomRange(0, screen.height);\n\n            // Create a white square (this simulates the glitch)\n            let square = sprites.create(img`\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n                1 1 1 1 1 1 1 1 1\n            `, SpriteKind.Player);\n\n            square.setPosition(x, y);\n            square.setImage(img` \n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            . . . . . . . . .\n            `);\n\n            square.image.fill(15); // White square\n            square.setFlag(SpriteFlag.Invisible, false);\n\n            // Remove the square after a short glitch duration\n            pause(glitchDuration);\n            square.destroy();\n        }\n    }\n}","pxt.json":"{\n    \"name\": \"Glitch effect extension\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"U.ts\",\n        \"Uu.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[],"lastSaveTime":1743862123926}